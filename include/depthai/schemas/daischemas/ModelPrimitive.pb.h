// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daischemas/ModelPrimitive.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_daischemas_2fModelPrimitive_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_daischemas_2fModelPrimitive_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "daischemas/Color.pb.h"
#include "daischemas/Pose.pb.h"
#include "daischemas/Vector3.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_daischemas_2fModelPrimitive_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_daischemas_2fModelPrimitive_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_daischemas_2fModelPrimitive_2eproto;
namespace dai {
namespace schemas {
class ModelPrimitive;
struct ModelPrimitiveDefaultTypeInternal;
extern ModelPrimitiveDefaultTypeInternal _ModelPrimitive_default_instance_;
}  // namespace schemas
}  // namespace dai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dai {
namespace schemas {

// ===================================================================


// -------------------------------------------------------------------

class ModelPrimitive final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dai.schemas.ModelPrimitive) */ {
 public:
  inline ModelPrimitive() : ModelPrimitive(nullptr) {}
  ~ModelPrimitive() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModelPrimitive(::google::protobuf::internal::ConstantInitialized);

  inline ModelPrimitive(const ModelPrimitive& from)
      : ModelPrimitive(nullptr, from) {}
  ModelPrimitive(ModelPrimitive&& from) noexcept
    : ModelPrimitive() {
    *this = ::std::move(from);
  }

  inline ModelPrimitive& operator=(const ModelPrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelPrimitive& operator=(ModelPrimitive&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelPrimitive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelPrimitive* internal_default_instance() {
    return reinterpret_cast<const ModelPrimitive*>(
               &_ModelPrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelPrimitive& a, ModelPrimitive& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelPrimitive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelPrimitive* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelPrimitive* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelPrimitive>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModelPrimitive& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModelPrimitive& from) {
    ModelPrimitive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ModelPrimitive* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dai.schemas.ModelPrimitive";
  }
  protected:
  explicit ModelPrimitive(::google::protobuf::Arena* arena);
  ModelPrimitive(::google::protobuf::Arena* arena, const ModelPrimitive& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 5,
    kMediaTypeFieldNumber = 6,
    kDataFieldNumber = 7,
    kPoseFieldNumber = 1,
    kScaleFieldNumber = 2,
    kColorFieldNumber = 3,
    kOverrideColorFieldNumber = 4,
  };
  // string url = 5;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string media_type = 6;
  void clear_media_type() ;
  const std::string& media_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_media_type(Arg_&& arg, Args_... args);
  std::string* mutable_media_type();
  PROTOBUF_NODISCARD std::string* release_media_type();
  void set_allocated_media_type(std::string* value);

  private:
  const std::string& _internal_media_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_type(
      const std::string& value);
  std::string* _internal_mutable_media_type();

  public:
  // bytes data = 7;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .dai.schemas.Pose pose = 1;
  bool has_pose() const;
  void clear_pose() ;
  const ::dai::schemas::Pose& pose() const;
  PROTOBUF_NODISCARD ::dai::schemas::Pose* release_pose();
  ::dai::schemas::Pose* mutable_pose();
  void set_allocated_pose(::dai::schemas::Pose* value);
  void unsafe_arena_set_allocated_pose(::dai::schemas::Pose* value);
  ::dai::schemas::Pose* unsafe_arena_release_pose();

  private:
  const ::dai::schemas::Pose& _internal_pose() const;
  ::dai::schemas::Pose* _internal_mutable_pose();

  public:
  // .dai.schemas.Vector3 scale = 2;
  bool has_scale() const;
  void clear_scale() ;
  const ::dai::schemas::Vector3& scale() const;
  PROTOBUF_NODISCARD ::dai::schemas::Vector3* release_scale();
  ::dai::schemas::Vector3* mutable_scale();
  void set_allocated_scale(::dai::schemas::Vector3* value);
  void unsafe_arena_set_allocated_scale(::dai::schemas::Vector3* value);
  ::dai::schemas::Vector3* unsafe_arena_release_scale();

  private:
  const ::dai::schemas::Vector3& _internal_scale() const;
  ::dai::schemas::Vector3* _internal_mutable_scale();

  public:
  // .dai.schemas.Color color = 3;
  bool has_color() const;
  void clear_color() ;
  const ::dai::schemas::Color& color() const;
  PROTOBUF_NODISCARD ::dai::schemas::Color* release_color();
  ::dai::schemas::Color* mutable_color();
  void set_allocated_color(::dai::schemas::Color* value);
  void unsafe_arena_set_allocated_color(::dai::schemas::Color* value);
  ::dai::schemas::Color* unsafe_arena_release_color();

  private:
  const ::dai::schemas::Color& _internal_color() const;
  ::dai::schemas::Color* _internal_mutable_color();

  public:
  // bool override_color = 4;
  void clear_override_color() ;
  bool override_color() const;
  void set_override_color(bool value);

  private:
  bool _internal_override_color() const;
  void _internal_set_override_color(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dai.schemas.ModelPrimitive)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr media_type_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::dai::schemas::Pose* pose_;
    ::dai::schemas::Vector3* scale_;
    ::dai::schemas::Color* color_;
    bool override_color_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daischemas_2fModelPrimitive_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ModelPrimitive

// .dai.schemas.Pose pose = 1;
inline bool ModelPrimitive::has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline const ::dai::schemas::Pose& ModelPrimitive::_internal_pose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dai::schemas::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::dai::schemas::Pose&>(::dai::schemas::_Pose_default_instance_);
}
inline const ::dai::schemas::Pose& ModelPrimitive::pose() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.ModelPrimitive.pose)
  return _internal_pose();
}
inline void ModelPrimitive::unsafe_arena_set_allocated_pose(::dai::schemas::Pose* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = reinterpret_cast<::dai::schemas::Pose*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dai.schemas.ModelPrimitive.pose)
}
inline ::dai::schemas::Pose* ModelPrimitive::release_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dai::schemas::Pose* released = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dai::schemas::Pose* ModelPrimitive::unsafe_arena_release_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.ModelPrimitive.pose)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dai::schemas::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::dai::schemas::Pose* ModelPrimitive::_internal_mutable_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::dai::schemas::Pose>(GetArena());
    _impl_.pose_ = reinterpret_cast<::dai::schemas::Pose*>(p);
  }
  return _impl_.pose_;
}
inline ::dai::schemas::Pose* ModelPrimitive::mutable_pose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dai::schemas::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:dai.schemas.ModelPrimitive.pose)
  return _msg;
}
inline void ModelPrimitive::set_allocated_pose(::dai::schemas::Pose* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pose_ = reinterpret_cast<::dai::schemas::Pose*>(value);
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.ModelPrimitive.pose)
}

// .dai.schemas.Vector3 scale = 2;
inline bool ModelPrimitive::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_ != nullptr);
  return value;
}
inline const ::dai::schemas::Vector3& ModelPrimitive::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dai::schemas::Vector3* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::dai::schemas::Vector3&>(::dai::schemas::_Vector3_default_instance_);
}
inline const ::dai::schemas::Vector3& ModelPrimitive::scale() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.ModelPrimitive.scale)
  return _internal_scale();
}
inline void ModelPrimitive::unsafe_arena_set_allocated_scale(::dai::schemas::Vector3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = reinterpret_cast<::dai::schemas::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dai.schemas.ModelPrimitive.scale)
}
inline ::dai::schemas::Vector3* ModelPrimitive::release_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dai::schemas::Vector3* released = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dai::schemas::Vector3* ModelPrimitive::unsafe_arena_release_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.ModelPrimitive.scale)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dai::schemas::Vector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::dai::schemas::Vector3* ModelPrimitive::_internal_mutable_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::dai::schemas::Vector3>(GetArena());
    _impl_.scale_ = reinterpret_cast<::dai::schemas::Vector3*>(p);
  }
  return _impl_.scale_;
}
inline ::dai::schemas::Vector3* ModelPrimitive::mutable_scale() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dai::schemas::Vector3* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:dai.schemas.ModelPrimitive.scale)
  return _msg;
}
inline void ModelPrimitive::set_allocated_scale(::dai::schemas::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scale_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.scale_ = reinterpret_cast<::dai::schemas::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.ModelPrimitive.scale)
}

// .dai.schemas.Color color = 3;
inline bool ModelPrimitive::has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_ != nullptr);
  return value;
}
inline const ::dai::schemas::Color& ModelPrimitive::_internal_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dai::schemas::Color* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::dai::schemas::Color&>(::dai::schemas::_Color_default_instance_);
}
inline const ::dai::schemas::Color& ModelPrimitive::color() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.ModelPrimitive.color)
  return _internal_color();
}
inline void ModelPrimitive::unsafe_arena_set_allocated_color(::dai::schemas::Color* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = reinterpret_cast<::dai::schemas::Color*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dai.schemas.ModelPrimitive.color)
}
inline ::dai::schemas::Color* ModelPrimitive::release_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::dai::schemas::Color* released = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dai::schemas::Color* ModelPrimitive::unsafe_arena_release_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.ModelPrimitive.color)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::dai::schemas::Color* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::dai::schemas::Color* ModelPrimitive::_internal_mutable_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::dai::schemas::Color>(GetArena());
    _impl_.color_ = reinterpret_cast<::dai::schemas::Color*>(p);
  }
  return _impl_.color_;
}
inline ::dai::schemas::Color* ModelPrimitive::mutable_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dai::schemas::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:dai.schemas.ModelPrimitive.color)
  return _msg;
}
inline void ModelPrimitive::set_allocated_color(::dai::schemas::Color* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.color_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.color_ = reinterpret_cast<::dai::schemas::Color*>(value);
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.ModelPrimitive.color)
}

// bool override_color = 4;
inline void ModelPrimitive::clear_override_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.override_color_ = false;
}
inline bool ModelPrimitive::override_color() const {
  // @@protoc_insertion_point(field_get:dai.schemas.ModelPrimitive.override_color)
  return _internal_override_color();
}
inline void ModelPrimitive::set_override_color(bool value) {
  _internal_set_override_color(value);
  // @@protoc_insertion_point(field_set:dai.schemas.ModelPrimitive.override_color)
}
inline bool ModelPrimitive::_internal_override_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.override_color_;
}
inline void ModelPrimitive::_internal_set_override_color(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.override_color_ = value;
}

// string url = 5;
inline void ModelPrimitive::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& ModelPrimitive::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.ModelPrimitive.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelPrimitive::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dai.schemas.ModelPrimitive.url)
}
inline std::string* ModelPrimitive::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:dai.schemas.ModelPrimitive.url)
  return _s;
}
inline const std::string& ModelPrimitive::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void ModelPrimitive::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArena());
}
inline std::string* ModelPrimitive::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* ModelPrimitive::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.ModelPrimitive.url)
  return _impl_.url_.Release();
}
inline void ModelPrimitive::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.ModelPrimitive.url)
}

// string media_type = 6;
inline void ModelPrimitive::clear_media_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.media_type_.ClearToEmpty();
}
inline const std::string& ModelPrimitive::media_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.ModelPrimitive.media_type)
  return _internal_media_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelPrimitive::set_media_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.media_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dai.schemas.ModelPrimitive.media_type)
}
inline std::string* ModelPrimitive::mutable_media_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_media_type();
  // @@protoc_insertion_point(field_mutable:dai.schemas.ModelPrimitive.media_type)
  return _s;
}
inline const std::string& ModelPrimitive::_internal_media_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.media_type_.Get();
}
inline void ModelPrimitive::_internal_set_media_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.media_type_.Set(value, GetArena());
}
inline std::string* ModelPrimitive::_internal_mutable_media_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.media_type_.Mutable( GetArena());
}
inline std::string* ModelPrimitive::release_media_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.ModelPrimitive.media_type)
  return _impl_.media_type_.Release();
}
inline void ModelPrimitive::set_allocated_media_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.media_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.media_type_.IsDefault()) {
          _impl_.media_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.ModelPrimitive.media_type)
}

// bytes data = 7;
inline void ModelPrimitive::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ModelPrimitive::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.ModelPrimitive.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModelPrimitive::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dai.schemas.ModelPrimitive.data)
}
inline std::string* ModelPrimitive::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dai.schemas.ModelPrimitive.data)
  return _s;
}
inline const std::string& ModelPrimitive::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void ModelPrimitive::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ModelPrimitive::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ModelPrimitive::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.ModelPrimitive.data)
  return _impl_.data_.Release();
}
inline void ModelPrimitive::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.ModelPrimitive.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace schemas
}  // namespace dai


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_daischemas_2fModelPrimitive_2eproto_2epb_2eh
