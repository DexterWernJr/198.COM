// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daischemas/ImageAnnotations.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_daischemas_2fImageAnnotations_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_daischemas_2fImageAnnotations_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "daischemas/CircleAnnotation.pb.h"
#include "daischemas/PointsAnnotation.pb.h"
#include "daischemas/TextAnnotation.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_daischemas_2fImageAnnotations_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_daischemas_2fImageAnnotations_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_daischemas_2fImageAnnotations_2eproto;
namespace dai {
namespace schemas {
class ImageAnnotations;
struct ImageAnnotationsDefaultTypeInternal;
extern ImageAnnotationsDefaultTypeInternal _ImageAnnotations_default_instance_;
}  // namespace schemas
}  // namespace dai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dai {
namespace schemas {

// ===================================================================


// -------------------------------------------------------------------

class ImageAnnotations final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dai.schemas.ImageAnnotations) */ {
 public:
  inline ImageAnnotations() : ImageAnnotations(nullptr) {}
  ~ImageAnnotations() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageAnnotations(::google::protobuf::internal::ConstantInitialized);

  inline ImageAnnotations(const ImageAnnotations& from)
      : ImageAnnotations(nullptr, from) {}
  ImageAnnotations(ImageAnnotations&& from) noexcept
    : ImageAnnotations() {
    *this = ::std::move(from);
  }

  inline ImageAnnotations& operator=(const ImageAnnotations& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageAnnotations& operator=(ImageAnnotations&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageAnnotations& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageAnnotations* internal_default_instance() {
    return reinterpret_cast<const ImageAnnotations*>(
               &_ImageAnnotations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageAnnotations& a, ImageAnnotations& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageAnnotations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageAnnotations* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageAnnotations* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageAnnotations>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageAnnotations& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImageAnnotations& from) {
    ImageAnnotations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ImageAnnotations* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dai.schemas.ImageAnnotations";
  }
  protected:
  explicit ImageAnnotations(::google::protobuf::Arena* arena);
  ImageAnnotations(::google::protobuf::Arena* arena, const ImageAnnotations& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCirclesFieldNumber = 1,
    kPointsFieldNumber = 2,
    kTextsFieldNumber = 3,
  };
  // repeated .dai.schemas.CircleAnnotation circles = 1;
  int circles_size() const;
  private:
  int _internal_circles_size() const;

  public:
  void clear_circles() ;
  ::dai::schemas::CircleAnnotation* mutable_circles(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::CircleAnnotation >*
      mutable_circles();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::CircleAnnotation>& _internal_circles() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::CircleAnnotation>* _internal_mutable_circles();
  public:
  const ::dai::schemas::CircleAnnotation& circles(int index) const;
  ::dai::schemas::CircleAnnotation* add_circles();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::CircleAnnotation >&
      circles() const;
  // repeated .dai.schemas.PointsAnnotation points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::dai::schemas::PointsAnnotation* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::PointsAnnotation >*
      mutable_points();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::PointsAnnotation>& _internal_points() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::PointsAnnotation>* _internal_mutable_points();
  public:
  const ::dai::schemas::PointsAnnotation& points(int index) const;
  ::dai::schemas::PointsAnnotation* add_points();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::PointsAnnotation >&
      points() const;
  // repeated .dai.schemas.TextAnnotation texts = 3;
  int texts_size() const;
  private:
  int _internal_texts_size() const;

  public:
  void clear_texts() ;
  ::dai::schemas::TextAnnotation* mutable_texts(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::TextAnnotation >*
      mutable_texts();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::TextAnnotation>& _internal_texts() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::TextAnnotation>* _internal_mutable_texts();
  public:
  const ::dai::schemas::TextAnnotation& texts(int index) const;
  ::dai::schemas::TextAnnotation* add_texts();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::TextAnnotation >&
      texts() const;
  // @@protoc_insertion_point(class_scope:dai.schemas.ImageAnnotations)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::CircleAnnotation > circles_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::PointsAnnotation > points_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::TextAnnotation > texts_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daischemas_2fImageAnnotations_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ImageAnnotations

// repeated .dai.schemas.CircleAnnotation circles = 1;
inline int ImageAnnotations::_internal_circles_size() const {
  return _internal_circles().size();
}
inline int ImageAnnotations::circles_size() const {
  return _internal_circles_size();
}
inline ::dai::schemas::CircleAnnotation* ImageAnnotations::mutable_circles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.ImageAnnotations.circles)
  return _internal_mutable_circles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::CircleAnnotation>* ImageAnnotations::mutable_circles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.ImageAnnotations.circles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_circles();
}
inline const ::dai::schemas::CircleAnnotation& ImageAnnotations::circles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.ImageAnnotations.circles)
  return _internal_circles().Get(index);
}
inline ::dai::schemas::CircleAnnotation* ImageAnnotations::add_circles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::CircleAnnotation* _add = _internal_mutable_circles()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.ImageAnnotations.circles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::CircleAnnotation>& ImageAnnotations::circles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.ImageAnnotations.circles)
  return _internal_circles();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::CircleAnnotation>&
ImageAnnotations::_internal_circles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.circles_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::CircleAnnotation>*
ImageAnnotations::_internal_mutable_circles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.circles_;
}

// repeated .dai.schemas.PointsAnnotation points = 2;
inline int ImageAnnotations::_internal_points_size() const {
  return _internal_points().size();
}
inline int ImageAnnotations::points_size() const {
  return _internal_points_size();
}
inline ::dai::schemas::PointsAnnotation* ImageAnnotations::mutable_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.ImageAnnotations.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::PointsAnnotation>* ImageAnnotations::mutable_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.ImageAnnotations.points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points();
}
inline const ::dai::schemas::PointsAnnotation& ImageAnnotations::points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.ImageAnnotations.points)
  return _internal_points().Get(index);
}
inline ::dai::schemas::PointsAnnotation* ImageAnnotations::add_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::PointsAnnotation* _add = _internal_mutable_points()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.ImageAnnotations.points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::PointsAnnotation>& ImageAnnotations::points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.ImageAnnotations.points)
  return _internal_points();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::PointsAnnotation>&
ImageAnnotations::_internal_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::PointsAnnotation>*
ImageAnnotations::_internal_mutable_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_;
}

// repeated .dai.schemas.TextAnnotation texts = 3;
inline int ImageAnnotations::_internal_texts_size() const {
  return _internal_texts().size();
}
inline int ImageAnnotations::texts_size() const {
  return _internal_texts_size();
}
inline ::dai::schemas::TextAnnotation* ImageAnnotations::mutable_texts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.ImageAnnotations.texts)
  return _internal_mutable_texts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::TextAnnotation>* ImageAnnotations::mutable_texts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.ImageAnnotations.texts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_texts();
}
inline const ::dai::schemas::TextAnnotation& ImageAnnotations::texts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.ImageAnnotations.texts)
  return _internal_texts().Get(index);
}
inline ::dai::schemas::TextAnnotation* ImageAnnotations::add_texts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::TextAnnotation* _add = _internal_mutable_texts()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.ImageAnnotations.texts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::TextAnnotation>& ImageAnnotations::texts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.ImageAnnotations.texts)
  return _internal_texts();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::TextAnnotation>&
ImageAnnotations::_internal_texts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.texts_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::TextAnnotation>*
ImageAnnotations::_internal_mutable_texts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.texts_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace schemas
}  // namespace dai


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_daischemas_2fImageAnnotations_2eproto_2epb_2eh
