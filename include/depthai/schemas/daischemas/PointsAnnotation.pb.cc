// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daischemas/PointsAnnotation.proto

#include "daischemas/PointsAnnotation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace dai {
namespace schemas {

inline constexpr PointsAnnotation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        points_{},
        outline_colors_{},
        timestamp_{nullptr},
        outline_color_{nullptr},
        fill_color_{nullptr},
        thickness_{0},
        type_{static_cast< ::dai::schemas::PointsAnnotation_Type >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR PointsAnnotation::PointsAnnotation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PointsAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointsAnnotationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointsAnnotationDefaultTypeInternal() {}
  union {
    PointsAnnotation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointsAnnotationDefaultTypeInternal _PointsAnnotation_default_instance_;
}  // namespace schemas
}  // namespace dai
static ::_pb::Metadata file_level_metadata_daischemas_2fPointsAnnotation_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_daischemas_2fPointsAnnotation_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_daischemas_2fPointsAnnotation_2eproto = nullptr;
const ::uint32_t TableStruct_daischemas_2fPointsAnnotation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dai::schemas::PointsAnnotation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::PointsAnnotation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dai::schemas::PointsAnnotation, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::PointsAnnotation, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::PointsAnnotation, _impl_.points_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::PointsAnnotation, _impl_.outline_color_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::PointsAnnotation, _impl_.outline_colors_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::PointsAnnotation, _impl_.fill_color_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::PointsAnnotation, _impl_.thickness_),
    0,
    ~0u,
    ~0u,
    1,
    ~0u,
    2,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::dai::schemas::PointsAnnotation)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dai::schemas::_PointsAnnotation_default_instance_._instance,
};
const char descriptor_table_protodef_daischemas_2fPointsAnnotation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!daischemas/PointsAnnotation.proto\022\013dai"
    ".schemas\032\026daischemas/Color.proto\032\027daisch"
    "emas/Point2.proto\032\037google/protobuf/times"
    "tamp.proto\"\371\002\n\020PointsAnnotation\022-\n\ttimes"
    "tamp\030\001 \001(\0132\032.google.protobuf.Timestamp\0220"
    "\n\004type\030\002 \001(\0162\".dai.schemas.PointsAnnotat"
    "ion.Type\022#\n\006points\030\003 \003(\0132\023.dai.schemas.P"
    "oint2\022)\n\routline_color\030\004 \001(\0132\022.dai.schem"
    "as.Color\022*\n\016outline_colors\030\005 \003(\0132\022.dai.s"
    "chemas.Color\022&\n\nfill_color\030\006 \001(\0132\022.dai.s"
    "chemas.Color\022\021\n\tthickness\030\007 \001(\001\"M\n\004Type\022"
    "\013\n\007UNKNOWN\020\000\022\n\n\006POINTS\020\001\022\r\n\tLINE_LOOP\020\002\022"
    "\016\n\nLINE_STRIP\020\003\022\r\n\tLINE_LIST\020\004b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_daischemas_2fPointsAnnotation_2eproto_deps[3] =
    {
        &::descriptor_table_daischemas_2fColor_2eproto,
        &::descriptor_table_daischemas_2fPoint2_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_daischemas_2fPointsAnnotation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_daischemas_2fPointsAnnotation_2eproto = {
    false,
    false,
    518,
    descriptor_table_protodef_daischemas_2fPointsAnnotation_2eproto,
    "daischemas/PointsAnnotation.proto",
    &descriptor_table_daischemas_2fPointsAnnotation_2eproto_once,
    descriptor_table_daischemas_2fPointsAnnotation_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_daischemas_2fPointsAnnotation_2eproto::offsets,
    file_level_metadata_daischemas_2fPointsAnnotation_2eproto,
    file_level_enum_descriptors_daischemas_2fPointsAnnotation_2eproto,
    file_level_service_descriptors_daischemas_2fPointsAnnotation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_daischemas_2fPointsAnnotation_2eproto_getter() {
  return &descriptor_table_daischemas_2fPointsAnnotation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_daischemas_2fPointsAnnotation_2eproto(&descriptor_table_daischemas_2fPointsAnnotation_2eproto);
namespace dai {
namespace schemas {
const ::google::protobuf::EnumDescriptor* PointsAnnotation_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_daischemas_2fPointsAnnotation_2eproto);
  return file_level_enum_descriptors_daischemas_2fPointsAnnotation_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t PointsAnnotation_Type_internal_data_[] = {
    327680u, 0u, };
bool PointsAnnotation_Type_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr PointsAnnotation_Type PointsAnnotation::UNKNOWN;
constexpr PointsAnnotation_Type PointsAnnotation::POINTS;
constexpr PointsAnnotation_Type PointsAnnotation::LINE_LOOP;
constexpr PointsAnnotation_Type PointsAnnotation::LINE_STRIP;
constexpr PointsAnnotation_Type PointsAnnotation::LINE_LIST;
constexpr PointsAnnotation_Type PointsAnnotation::Type_MIN;
constexpr PointsAnnotation_Type PointsAnnotation::Type_MAX;
constexpr int PointsAnnotation::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class PointsAnnotation::_Internal {
 public:
  using HasBits = decltype(std::declval<PointsAnnotation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const PointsAnnotation* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dai::schemas::Color& outline_color(const PointsAnnotation* msg);
  static void set_has_outline_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::dai::schemas::Color& fill_color(const PointsAnnotation* msg);
  static void set_has_fill_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& PointsAnnotation::_Internal::timestamp(const PointsAnnotation* msg) {
  return *msg->_impl_.timestamp_;
}
const ::dai::schemas::Color& PointsAnnotation::_Internal::outline_color(const PointsAnnotation* msg) {
  return *msg->_impl_.outline_color_;
}
const ::dai::schemas::Color& PointsAnnotation::_Internal::fill_color(const PointsAnnotation* msg) {
  return *msg->_impl_.fill_color_;
}
void PointsAnnotation::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PointsAnnotation::clear_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.points_.Clear();
}
void PointsAnnotation::clear_outline_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.outline_color_ != nullptr) _impl_.outline_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PointsAnnotation::clear_outline_colors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outline_colors_.Clear();
}
void PointsAnnotation::clear_fill_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.fill_color_ != nullptr) _impl_.fill_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PointsAnnotation::PointsAnnotation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dai.schemas.PointsAnnotation)
}
inline PROTOBUF_NDEBUG_INLINE PointsAnnotation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        points_{visibility, arena, from.points_},
        outline_colors_{visibility, arena, from.outline_colors_} {}

PointsAnnotation::PointsAnnotation(
    ::google::protobuf::Arena* arena,
    const PointsAnnotation& from)
    : ::google::protobuf::Message(arena) {
  PointsAnnotation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;
  _impl_.outline_color_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::dai::schemas::Color>(arena, *from._impl_.outline_color_)
                : nullptr;
  _impl_.fill_color_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::dai::schemas::Color>(arena, *from._impl_.fill_color_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, thickness_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, thickness_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, thickness_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:dai.schemas.PointsAnnotation)
}
inline PROTOBUF_NDEBUG_INLINE PointsAnnotation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        points_{visibility, arena},
        outline_colors_{visibility, arena} {}

inline void PointsAnnotation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::type_));
}
PointsAnnotation::~PointsAnnotation() {
  // @@protoc_insertion_point(destructor:dai.schemas.PointsAnnotation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PointsAnnotation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.timestamp_;
  delete _impl_.outline_color_;
  delete _impl_.fill_color_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PointsAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:dai.schemas.PointsAnnotation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.outline_colors_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.outline_color_ != nullptr);
      _impl_.outline_color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.fill_color_ != nullptr);
      _impl_.fill_color_->Clear();
    }
  }
  ::memset(&_impl_.thickness_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.thickness_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PointsAnnotation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 5, 0, 2> PointsAnnotation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PointsAnnotation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.timestamp_)}},
    // .dai.schemas.PointsAnnotation.Type type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PointsAnnotation, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.type_)}},
    // repeated .dai.schemas.Point2 points = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.points_)}},
    // .dai.schemas.Color outline_color = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 2, PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.outline_color_)}},
    // repeated .dai.schemas.Color outline_colors = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.outline_colors_)}},
    // .dai.schemas.Color fill_color = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 4, PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.fill_color_)}},
    // double thickness = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.thickness_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dai.schemas.PointsAnnotation.Type type = 2;
    {PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .dai.schemas.Point2 points = 3;
    {PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.points_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dai.schemas.Color outline_color = 4;
    {PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.outline_color_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.Color outline_colors = 5;
    {PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.outline_colors_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dai.schemas.Color fill_color = 6;
    {PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.fill_color_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double thickness = 7;
    {PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.thickness_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::Point2>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::Color>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::Color>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::Color>()},
  }}, {{
  }},
};

::uint8_t* PointsAnnotation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dai.schemas.PointsAnnotation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .dai.schemas.PointsAnnotation.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // repeated .dai.schemas.Point2 points = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .dai.schemas.Color outline_color = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::outline_color(this),
        _Internal::outline_color(this).GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.Color outline_colors = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outline_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_outline_colors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .dai.schemas.Color fill_color = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::fill_color(this),
        _Internal::fill_color(this).GetCachedSize(), target, stream);
  }

  // double thickness = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_thickness = this->_internal_thickness();
  ::uint64_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_thickness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dai.schemas.PointsAnnotation)
  return target;
}

::size_t PointsAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dai.schemas.PointsAnnotation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dai.schemas.Point2 points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_internal_points()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.Color outline_colors = 5;
  total_size += 1UL * this->_internal_outline_colors_size();
  for (const auto& msg : this->_internal_outline_colors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
    }

    // .dai.schemas.Color outline_color = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.outline_color_);
    }

    // .dai.schemas.Color fill_color = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.fill_color_);
    }

  }
  // double thickness = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_thickness = this->_internal_thickness();
  ::uint64_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    total_size += 9;
  }

  // .dai.schemas.PointsAnnotation.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PointsAnnotation::_class_data_ = {
    PointsAnnotation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PointsAnnotation::GetClassData() const {
  return &_class_data_;
}

void PointsAnnotation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PointsAnnotation*>(&to_msg);
  auto& from = static_cast<const PointsAnnotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dai.schemas.PointsAnnotation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(
      from._internal_points());
  _this->_internal_mutable_outline_colors()->MergeFrom(
      from._internal_outline_colors());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_outline_color()->::dai::schemas::Color::MergeFrom(
          from._internal_outline_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_fill_color()->::dai::schemas::Color::MergeFrom(
          from._internal_fill_color());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_thickness = from._internal_thickness();
  ::uint64_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    _this->_internal_set_thickness(from._internal_thickness());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PointsAnnotation::CopyFrom(const PointsAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dai.schemas.PointsAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PointsAnnotation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PointsAnnotation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PointsAnnotation::InternalSwap(PointsAnnotation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.outline_colors_.InternalSwap(&other->_impl_.outline_colors_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.type_)
      + sizeof(PointsAnnotation::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PointsAnnotation, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata PointsAnnotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_daischemas_2fPointsAnnotation_2eproto_getter, &descriptor_table_daischemas_2fPointsAnnotation_2eproto_once,
      file_level_metadata_daischemas_2fPointsAnnotation_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace schemas
}  // namespace dai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
