// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daischemas/ImageAnnotations.proto

#include "daischemas/ImageAnnotations.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace dai {
namespace schemas {

inline constexpr ImageAnnotations::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : circles_{},
        points_{},
        texts_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ImageAnnotations::ImageAnnotations(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ImageAnnotationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageAnnotationsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageAnnotationsDefaultTypeInternal() {}
  union {
    ImageAnnotations _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageAnnotationsDefaultTypeInternal _ImageAnnotations_default_instance_;
}  // namespace schemas
}  // namespace dai
static ::_pb::Metadata file_level_metadata_daischemas_2fImageAnnotations_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_daischemas_2fImageAnnotations_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_daischemas_2fImageAnnotations_2eproto = nullptr;
const ::uint32_t TableStruct_daischemas_2fImageAnnotations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dai::schemas::ImageAnnotations, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dai::schemas::ImageAnnotations, _impl_.circles_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::ImageAnnotations, _impl_.points_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::ImageAnnotations, _impl_.texts_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::dai::schemas::ImageAnnotations)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dai::schemas::_ImageAnnotations_default_instance_._instance,
};
const char descriptor_table_protodef_daischemas_2fImageAnnotations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!daischemas/ImageAnnotations.proto\022\013dai"
    ".schemas\032!daischemas/CircleAnnotation.pr"
    "oto\032!daischemas/PointsAnnotation.proto\032\037"
    "daischemas/TextAnnotation.proto\"\235\001\n\020Imag"
    "eAnnotations\022.\n\007circles\030\001 \003(\0132\035.dai.sche"
    "mas.CircleAnnotation\022-\n\006points\030\002 \003(\0132\035.d"
    "ai.schemas.PointsAnnotation\022*\n\005texts\030\003 \003"
    "(\0132\033.dai.schemas.TextAnnotationb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_daischemas_2fImageAnnotations_2eproto_deps[3] =
    {
        &::descriptor_table_daischemas_2fCircleAnnotation_2eproto,
        &::descriptor_table_daischemas_2fPointsAnnotation_2eproto,
        &::descriptor_table_daischemas_2fTextAnnotation_2eproto,
};
static ::absl::once_flag descriptor_table_daischemas_2fImageAnnotations_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_daischemas_2fImageAnnotations_2eproto = {
    false,
    false,
    319,
    descriptor_table_protodef_daischemas_2fImageAnnotations_2eproto,
    "daischemas/ImageAnnotations.proto",
    &descriptor_table_daischemas_2fImageAnnotations_2eproto_once,
    descriptor_table_daischemas_2fImageAnnotations_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_daischemas_2fImageAnnotations_2eproto::offsets,
    file_level_metadata_daischemas_2fImageAnnotations_2eproto,
    file_level_enum_descriptors_daischemas_2fImageAnnotations_2eproto,
    file_level_service_descriptors_daischemas_2fImageAnnotations_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_daischemas_2fImageAnnotations_2eproto_getter() {
  return &descriptor_table_daischemas_2fImageAnnotations_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_daischemas_2fImageAnnotations_2eproto(&descriptor_table_daischemas_2fImageAnnotations_2eproto);
namespace dai {
namespace schemas {
// ===================================================================

class ImageAnnotations::_Internal {
 public:
};

void ImageAnnotations::clear_circles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.circles_.Clear();
}
void ImageAnnotations::clear_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.points_.Clear();
}
void ImageAnnotations::clear_texts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.texts_.Clear();
}
ImageAnnotations::ImageAnnotations(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dai.schemas.ImageAnnotations)
}
inline PROTOBUF_NDEBUG_INLINE ImageAnnotations::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : circles_{visibility, arena, from.circles_},
        points_{visibility, arena, from.points_},
        texts_{visibility, arena, from.texts_},
        _cached_size_{0} {}

ImageAnnotations::ImageAnnotations(
    ::google::protobuf::Arena* arena,
    const ImageAnnotations& from)
    : ::google::protobuf::Message(arena) {
  ImageAnnotations* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:dai.schemas.ImageAnnotations)
}
inline PROTOBUF_NDEBUG_INLINE ImageAnnotations::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : circles_{visibility, arena},
        points_{visibility, arena},
        texts_{visibility, arena},
        _cached_size_{0} {}

inline void ImageAnnotations::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ImageAnnotations::~ImageAnnotations() {
  // @@protoc_insertion_point(destructor:dai.schemas.ImageAnnotations)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ImageAnnotations::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ImageAnnotations::Clear() {
// @@protoc_insertion_point(message_clear_start:dai.schemas.ImageAnnotations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.circles_.Clear();
  _impl_.points_.Clear();
  _impl_.texts_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ImageAnnotations::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> ImageAnnotations::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ImageAnnotations_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .dai.schemas.CircleAnnotation circles = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ImageAnnotations, _impl_.circles_)}},
    // repeated .dai.schemas.PointsAnnotation points = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ImageAnnotations, _impl_.points_)}},
    // repeated .dai.schemas.TextAnnotation texts = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(ImageAnnotations, _impl_.texts_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .dai.schemas.CircleAnnotation circles = 1;
    {PROTOBUF_FIELD_OFFSET(ImageAnnotations, _impl_.circles_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.PointsAnnotation points = 2;
    {PROTOBUF_FIELD_OFFSET(ImageAnnotations, _impl_.points_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.TextAnnotation texts = 3;
    {PROTOBUF_FIELD_OFFSET(ImageAnnotations, _impl_.texts_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dai::schemas::CircleAnnotation>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::PointsAnnotation>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::TextAnnotation>()},
  }}, {{
  }},
};

::uint8_t* ImageAnnotations::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dai.schemas.ImageAnnotations)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .dai.schemas.CircleAnnotation circles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_circles_size()); i < n; i++) {
    const auto& repfield = this->_internal_circles().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.PointsAnnotation points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.TextAnnotation texts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_texts_size()); i < n; i++) {
    const auto& repfield = this->_internal_texts().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dai.schemas.ImageAnnotations)
  return target;
}

::size_t ImageAnnotations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dai.schemas.ImageAnnotations)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dai.schemas.CircleAnnotation circles = 1;
  total_size += 1UL * this->_internal_circles_size();
  for (const auto& msg : this->_internal_circles()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.PointsAnnotation points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_internal_points()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.TextAnnotation texts = 3;
  total_size += 1UL * this->_internal_texts_size();
  for (const auto& msg : this->_internal_texts()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ImageAnnotations::_class_data_ = {
    ImageAnnotations::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ImageAnnotations::GetClassData() const {
  return &_class_data_;
}

void ImageAnnotations::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ImageAnnotations*>(&to_msg);
  auto& from = static_cast<const ImageAnnotations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dai.schemas.ImageAnnotations)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_circles()->MergeFrom(
      from._internal_circles());
  _this->_internal_mutable_points()->MergeFrom(
      from._internal_points());
  _this->_internal_mutable_texts()->MergeFrom(
      from._internal_texts());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImageAnnotations::CopyFrom(const ImageAnnotations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dai.schemas.ImageAnnotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImageAnnotations::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ImageAnnotations::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ImageAnnotations::InternalSwap(ImageAnnotations* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.circles_.InternalSwap(&other->_impl_.circles_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.texts_.InternalSwap(&other->_impl_.texts_);
}

::google::protobuf::Metadata ImageAnnotations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_daischemas_2fImageAnnotations_2eproto_getter, &descriptor_table_daischemas_2fImageAnnotations_2eproto_once,
      file_level_metadata_daischemas_2fImageAnnotations_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace schemas
}  // namespace dai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
