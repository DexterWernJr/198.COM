// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daischemas/SceneEntity.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_daischemas_2fSceneEntity_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_daischemas_2fSceneEntity_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "daischemas/ArrowPrimitive.pb.h"
#include "daischemas/CubePrimitive.pb.h"
#include "daischemas/CylinderPrimitive.pb.h"
#include "daischemas/KeyValuePair.pb.h"
#include "daischemas/LinePrimitive.pb.h"
#include "daischemas/ModelPrimitive.pb.h"
#include "daischemas/SpherePrimitive.pb.h"
#include "daischemas/TextPrimitive.pb.h"
#include "daischemas/TriangleListPrimitive.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_daischemas_2fSceneEntity_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_daischemas_2fSceneEntity_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_daischemas_2fSceneEntity_2eproto;
namespace dai {
namespace schemas {
class SceneEntity;
struct SceneEntityDefaultTypeInternal;
extern SceneEntityDefaultTypeInternal _SceneEntity_default_instance_;
}  // namespace schemas
}  // namespace dai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dai {
namespace schemas {

// ===================================================================


// -------------------------------------------------------------------

class SceneEntity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dai.schemas.SceneEntity) */ {
 public:
  inline SceneEntity() : SceneEntity(nullptr) {}
  ~SceneEntity() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SceneEntity(::google::protobuf::internal::ConstantInitialized);

  inline SceneEntity(const SceneEntity& from)
      : SceneEntity(nullptr, from) {}
  SceneEntity(SceneEntity&& from) noexcept
    : SceneEntity() {
    *this = ::std::move(from);
  }

  inline SceneEntity& operator=(const SceneEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEntity& operator=(SceneEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEntity* internal_default_instance() {
    return reinterpret_cast<const SceneEntity*>(
               &_SceneEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SceneEntity& a, SceneEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEntity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEntity* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEntity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SceneEntity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SceneEntity& from) {
    SceneEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SceneEntity* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dai.schemas.SceneEntity";
  }
  protected:
  explicit SceneEntity(::google::protobuf::Arena* arena);
  SceneEntity(::google::protobuf::Arena* arena, const SceneEntity& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 6,
    kArrowsFieldNumber = 7,
    kCubesFieldNumber = 8,
    kSpheresFieldNumber = 9,
    kCylindersFieldNumber = 10,
    kLinesFieldNumber = 11,
    kTrianglesFieldNumber = 12,
    kTextsFieldNumber = 13,
    kModelsFieldNumber = 14,
    kFrameIdFieldNumber = 2,
    kIdFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kLifetimeFieldNumber = 4,
    kFrameLockedFieldNumber = 5,
  };
  // repeated .dai.schemas.KeyValuePair metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  ::dai::schemas::KeyValuePair* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::KeyValuePair >*
      mutable_metadata();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::KeyValuePair>& _internal_metadata() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::KeyValuePair>* _internal_mutable_metadata();
  public:
  const ::dai::schemas::KeyValuePair& metadata(int index) const;
  ::dai::schemas::KeyValuePair* add_metadata();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::KeyValuePair >&
      metadata() const;
  // repeated .dai.schemas.ArrowPrimitive arrows = 7;
  int arrows_size() const;
  private:
  int _internal_arrows_size() const;

  public:
  void clear_arrows() ;
  ::dai::schemas::ArrowPrimitive* mutable_arrows(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::ArrowPrimitive >*
      mutable_arrows();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::ArrowPrimitive>& _internal_arrows() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::ArrowPrimitive>* _internal_mutable_arrows();
  public:
  const ::dai::schemas::ArrowPrimitive& arrows(int index) const;
  ::dai::schemas::ArrowPrimitive* add_arrows();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::ArrowPrimitive >&
      arrows() const;
  // repeated .dai.schemas.CubePrimitive cubes = 8;
  int cubes_size() const;
  private:
  int _internal_cubes_size() const;

  public:
  void clear_cubes() ;
  ::dai::schemas::CubePrimitive* mutable_cubes(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::CubePrimitive >*
      mutable_cubes();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::CubePrimitive>& _internal_cubes() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::CubePrimitive>* _internal_mutable_cubes();
  public:
  const ::dai::schemas::CubePrimitive& cubes(int index) const;
  ::dai::schemas::CubePrimitive* add_cubes();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::CubePrimitive >&
      cubes() const;
  // repeated .dai.schemas.SpherePrimitive spheres = 9;
  int spheres_size() const;
  private:
  int _internal_spheres_size() const;

  public:
  void clear_spheres() ;
  ::dai::schemas::SpherePrimitive* mutable_spheres(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::SpherePrimitive >*
      mutable_spheres();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::SpherePrimitive>& _internal_spheres() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::SpherePrimitive>* _internal_mutable_spheres();
  public:
  const ::dai::schemas::SpherePrimitive& spheres(int index) const;
  ::dai::schemas::SpherePrimitive* add_spheres();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::SpherePrimitive >&
      spheres() const;
  // repeated .dai.schemas.CylinderPrimitive cylinders = 10;
  int cylinders_size() const;
  private:
  int _internal_cylinders_size() const;

  public:
  void clear_cylinders() ;
  ::dai::schemas::CylinderPrimitive* mutable_cylinders(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::CylinderPrimitive >*
      mutable_cylinders();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::CylinderPrimitive>& _internal_cylinders() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::CylinderPrimitive>* _internal_mutable_cylinders();
  public:
  const ::dai::schemas::CylinderPrimitive& cylinders(int index) const;
  ::dai::schemas::CylinderPrimitive* add_cylinders();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::CylinderPrimitive >&
      cylinders() const;
  // repeated .dai.schemas.LinePrimitive lines = 11;
  int lines_size() const;
  private:
  int _internal_lines_size() const;

  public:
  void clear_lines() ;
  ::dai::schemas::LinePrimitive* mutable_lines(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::LinePrimitive >*
      mutable_lines();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::LinePrimitive>& _internal_lines() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::LinePrimitive>* _internal_mutable_lines();
  public:
  const ::dai::schemas::LinePrimitive& lines(int index) const;
  ::dai::schemas::LinePrimitive* add_lines();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::LinePrimitive >&
      lines() const;
  // repeated .dai.schemas.TriangleListPrimitive triangles = 12;
  int triangles_size() const;
  private:
  int _internal_triangles_size() const;

  public:
  void clear_triangles() ;
  ::dai::schemas::TriangleListPrimitive* mutable_triangles(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::TriangleListPrimitive >*
      mutable_triangles();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::TriangleListPrimitive>& _internal_triangles() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::TriangleListPrimitive>* _internal_mutable_triangles();
  public:
  const ::dai::schemas::TriangleListPrimitive& triangles(int index) const;
  ::dai::schemas::TriangleListPrimitive* add_triangles();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::TriangleListPrimitive >&
      triangles() const;
  // repeated .dai.schemas.TextPrimitive texts = 13;
  int texts_size() const;
  private:
  int _internal_texts_size() const;

  public:
  void clear_texts() ;
  ::dai::schemas::TextPrimitive* mutable_texts(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::TextPrimitive >*
      mutable_texts();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::TextPrimitive>& _internal_texts() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::TextPrimitive>* _internal_mutable_texts();
  public:
  const ::dai::schemas::TextPrimitive& texts(int index) const;
  ::dai::schemas::TextPrimitive* add_texts();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::TextPrimitive >&
      texts() const;
  // repeated .dai.schemas.ModelPrimitive models = 14;
  int models_size() const;
  private:
  int _internal_models_size() const;

  public:
  void clear_models() ;
  ::dai::schemas::ModelPrimitive* mutable_models(int index);
  ::google::protobuf::RepeatedPtrField< ::dai::schemas::ModelPrimitive >*
      mutable_models();
  private:
  const ::google::protobuf::RepeatedPtrField<::dai::schemas::ModelPrimitive>& _internal_models() const;
  ::google::protobuf::RepeatedPtrField<::dai::schemas::ModelPrimitive>* _internal_mutable_models();
  public:
  const ::dai::schemas::ModelPrimitive& models(int index) const;
  ::dai::schemas::ModelPrimitive* add_models();
  const ::google::protobuf::RepeatedPtrField< ::dai::schemas::ModelPrimitive >&
      models() const;
  // string frame_id = 2;
  void clear_frame_id() ;
  const std::string& frame_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_frame_id(Arg_&& arg, Args_... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* value);

  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(
      const std::string& value);
  std::string* _internal_mutable_frame_id();

  public:
  // string id = 3;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .google.protobuf.Duration lifetime = 4;
  bool has_lifetime() const;
  void clear_lifetime() ;
  const ::google::protobuf::Duration& lifetime() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_lifetime();
  ::google::protobuf::Duration* mutable_lifetime();
  void set_allocated_lifetime(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_lifetime(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_lifetime();

  private:
  const ::google::protobuf::Duration& _internal_lifetime() const;
  ::google::protobuf::Duration* _internal_mutable_lifetime();

  public:
  // bool frame_locked = 5;
  void clear_frame_locked() ;
  bool frame_locked() const;
  void set_frame_locked(bool value);

  private:
  bool _internal_frame_locked() const;
  void _internal_set_frame_locked(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dai.schemas.SceneEntity)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 11,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::KeyValuePair > metadata_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::ArrowPrimitive > arrows_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::CubePrimitive > cubes_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::SpherePrimitive > spheres_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::CylinderPrimitive > cylinders_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::LinePrimitive > lines_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::TriangleListPrimitive > triangles_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::TextPrimitive > texts_;
    ::google::protobuf::RepeatedPtrField< ::dai::schemas::ModelPrimitive > models_;
    ::google::protobuf::internal::ArenaStringPtr frame_id_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::Timestamp* timestamp_;
    ::google::protobuf::Duration* lifetime_;
    bool frame_locked_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_daischemas_2fSceneEntity_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SceneEntity

// .google.protobuf.Timestamp timestamp = 1;
inline bool SceneEntity::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& SceneEntity::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& SceneEntity::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.timestamp)
  return _internal_timestamp();
}
inline void SceneEntity::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dai.schemas.SceneEntity.timestamp)
}
inline ::google::protobuf::Timestamp* SceneEntity::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* SceneEntity::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.SceneEntity.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* SceneEntity::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* SceneEntity::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.timestamp)
  return _msg;
}
inline void SceneEntity::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.SceneEntity.timestamp)
}

// string frame_id = 2;
inline void SceneEntity::clear_frame_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_id_.ClearToEmpty();
}
inline const std::string& SceneEntity::frame_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.frame_id)
  return _internal_frame_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SceneEntity::set_frame_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dai.schemas.SceneEntity.frame_id)
}
inline std::string* SceneEntity::mutable_frame_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.frame_id)
  return _s;
}
inline const std::string& SceneEntity::_internal_frame_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.frame_id_.Get();
}
inline void SceneEntity::_internal_set_frame_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_id_.Set(value, GetArena());
}
inline std::string* SceneEntity::_internal_mutable_frame_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.frame_id_.Mutable( GetArena());
}
inline std::string* SceneEntity::release_frame_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.SceneEntity.frame_id)
  return _impl_.frame_id_.Release();
}
inline void SceneEntity::set_allocated_frame_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.frame_id_.IsDefault()) {
          _impl_.frame_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.SceneEntity.frame_id)
}

// string id = 3;
inline void SceneEntity::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SceneEntity::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SceneEntity::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dai.schemas.SceneEntity.id)
}
inline std::string* SceneEntity::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.id)
  return _s;
}
inline const std::string& SceneEntity::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void SceneEntity::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* SceneEntity::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* SceneEntity::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.SceneEntity.id)
  return _impl_.id_.Release();
}
inline void SceneEntity::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.SceneEntity.id)
}

// .google.protobuf.Duration lifetime = 4;
inline bool SceneEntity::has_lifetime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lifetime_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& SceneEntity::_internal_lifetime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& SceneEntity::lifetime() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.lifetime)
  return _internal_lifetime();
}
inline void SceneEntity::unsafe_arena_set_allocated_lifetime(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lifetime_);
  }
  _impl_.lifetime_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dai.schemas.SceneEntity.lifetime)
}
inline ::google::protobuf::Duration* SceneEntity::release_lifetime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.lifetime_;
  _impl_.lifetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* SceneEntity::unsafe_arena_release_lifetime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dai.schemas.SceneEntity.lifetime)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.lifetime_;
  _impl_.lifetime_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* SceneEntity::_internal_mutable_lifetime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArena());
    _impl_.lifetime_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.lifetime_;
}
inline ::google::protobuf::Duration* SceneEntity::mutable_lifetime() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Duration* _msg = _internal_mutable_lifetime();
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.lifetime)
  return _msg;
}
inline void SceneEntity::set_allocated_lifetime(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lifetime_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.lifetime_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:dai.schemas.SceneEntity.lifetime)
}

// bool frame_locked = 5;
inline void SceneEntity::clear_frame_locked() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_locked_ = false;
}
inline bool SceneEntity::frame_locked() const {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.frame_locked)
  return _internal_frame_locked();
}
inline void SceneEntity::set_frame_locked(bool value) {
  _internal_set_frame_locked(value);
  // @@protoc_insertion_point(field_set:dai.schemas.SceneEntity.frame_locked)
}
inline bool SceneEntity::_internal_frame_locked() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.frame_locked_;
}
inline void SceneEntity::_internal_set_frame_locked(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_locked_ = value;
}

// repeated .dai.schemas.KeyValuePair metadata = 6;
inline int SceneEntity::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int SceneEntity::metadata_size() const {
  return _internal_metadata_size();
}
inline ::dai::schemas::KeyValuePair* SceneEntity::mutable_metadata(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.metadata)
  return _internal_mutable_metadata()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::KeyValuePair>* SceneEntity::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.SceneEntity.metadata)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_metadata();
}
inline const ::dai::schemas::KeyValuePair& SceneEntity::metadata(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.metadata)
  return _internal_metadata().Get(index);
}
inline ::dai::schemas::KeyValuePair* SceneEntity::add_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::KeyValuePair* _add = _internal_mutable_metadata()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.SceneEntity.metadata)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::KeyValuePair>& SceneEntity::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.SceneEntity.metadata)
  return _internal_metadata();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::KeyValuePair>&
SceneEntity::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::KeyValuePair>*
SceneEntity::_internal_mutable_metadata() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.metadata_;
}

// repeated .dai.schemas.ArrowPrimitive arrows = 7;
inline int SceneEntity::_internal_arrows_size() const {
  return _internal_arrows().size();
}
inline int SceneEntity::arrows_size() const {
  return _internal_arrows_size();
}
inline ::dai::schemas::ArrowPrimitive* SceneEntity::mutable_arrows(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.arrows)
  return _internal_mutable_arrows()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::ArrowPrimitive>* SceneEntity::mutable_arrows()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.SceneEntity.arrows)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_arrows();
}
inline const ::dai::schemas::ArrowPrimitive& SceneEntity::arrows(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.arrows)
  return _internal_arrows().Get(index);
}
inline ::dai::schemas::ArrowPrimitive* SceneEntity::add_arrows() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::ArrowPrimitive* _add = _internal_mutable_arrows()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.SceneEntity.arrows)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::ArrowPrimitive>& SceneEntity::arrows() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.SceneEntity.arrows)
  return _internal_arrows();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::ArrowPrimitive>&
SceneEntity::_internal_arrows() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.arrows_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::ArrowPrimitive>*
SceneEntity::_internal_mutable_arrows() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.arrows_;
}

// repeated .dai.schemas.CubePrimitive cubes = 8;
inline int SceneEntity::_internal_cubes_size() const {
  return _internal_cubes().size();
}
inline int SceneEntity::cubes_size() const {
  return _internal_cubes_size();
}
inline ::dai::schemas::CubePrimitive* SceneEntity::mutable_cubes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.cubes)
  return _internal_mutable_cubes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::CubePrimitive>* SceneEntity::mutable_cubes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.SceneEntity.cubes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_cubes();
}
inline const ::dai::schemas::CubePrimitive& SceneEntity::cubes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.cubes)
  return _internal_cubes().Get(index);
}
inline ::dai::schemas::CubePrimitive* SceneEntity::add_cubes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::CubePrimitive* _add = _internal_mutable_cubes()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.SceneEntity.cubes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::CubePrimitive>& SceneEntity::cubes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.SceneEntity.cubes)
  return _internal_cubes();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::CubePrimitive>&
SceneEntity::_internal_cubes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cubes_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::CubePrimitive>*
SceneEntity::_internal_mutable_cubes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.cubes_;
}

// repeated .dai.schemas.SpherePrimitive spheres = 9;
inline int SceneEntity::_internal_spheres_size() const {
  return _internal_spheres().size();
}
inline int SceneEntity::spheres_size() const {
  return _internal_spheres_size();
}
inline ::dai::schemas::SpherePrimitive* SceneEntity::mutable_spheres(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.spheres)
  return _internal_mutable_spheres()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::SpherePrimitive>* SceneEntity::mutable_spheres()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.SceneEntity.spheres)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_spheres();
}
inline const ::dai::schemas::SpherePrimitive& SceneEntity::spheres(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.spheres)
  return _internal_spheres().Get(index);
}
inline ::dai::schemas::SpherePrimitive* SceneEntity::add_spheres() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::SpherePrimitive* _add = _internal_mutable_spheres()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.SceneEntity.spheres)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::SpherePrimitive>& SceneEntity::spheres() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.SceneEntity.spheres)
  return _internal_spheres();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::SpherePrimitive>&
SceneEntity::_internal_spheres() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.spheres_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::SpherePrimitive>*
SceneEntity::_internal_mutable_spheres() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.spheres_;
}

// repeated .dai.schemas.CylinderPrimitive cylinders = 10;
inline int SceneEntity::_internal_cylinders_size() const {
  return _internal_cylinders().size();
}
inline int SceneEntity::cylinders_size() const {
  return _internal_cylinders_size();
}
inline ::dai::schemas::CylinderPrimitive* SceneEntity::mutable_cylinders(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.cylinders)
  return _internal_mutable_cylinders()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::CylinderPrimitive>* SceneEntity::mutable_cylinders()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.SceneEntity.cylinders)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_cylinders();
}
inline const ::dai::schemas::CylinderPrimitive& SceneEntity::cylinders(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.cylinders)
  return _internal_cylinders().Get(index);
}
inline ::dai::schemas::CylinderPrimitive* SceneEntity::add_cylinders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::CylinderPrimitive* _add = _internal_mutable_cylinders()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.SceneEntity.cylinders)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::CylinderPrimitive>& SceneEntity::cylinders() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.SceneEntity.cylinders)
  return _internal_cylinders();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::CylinderPrimitive>&
SceneEntity::_internal_cylinders() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cylinders_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::CylinderPrimitive>*
SceneEntity::_internal_mutable_cylinders() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.cylinders_;
}

// repeated .dai.schemas.LinePrimitive lines = 11;
inline int SceneEntity::_internal_lines_size() const {
  return _internal_lines().size();
}
inline int SceneEntity::lines_size() const {
  return _internal_lines_size();
}
inline ::dai::schemas::LinePrimitive* SceneEntity::mutable_lines(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.lines)
  return _internal_mutable_lines()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::LinePrimitive>* SceneEntity::mutable_lines()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.SceneEntity.lines)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_lines();
}
inline const ::dai::schemas::LinePrimitive& SceneEntity::lines(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.lines)
  return _internal_lines().Get(index);
}
inline ::dai::schemas::LinePrimitive* SceneEntity::add_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::LinePrimitive* _add = _internal_mutable_lines()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.SceneEntity.lines)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::LinePrimitive>& SceneEntity::lines() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.SceneEntity.lines)
  return _internal_lines();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::LinePrimitive>&
SceneEntity::_internal_lines() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lines_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::LinePrimitive>*
SceneEntity::_internal_mutable_lines() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.lines_;
}

// repeated .dai.schemas.TriangleListPrimitive triangles = 12;
inline int SceneEntity::_internal_triangles_size() const {
  return _internal_triangles().size();
}
inline int SceneEntity::triangles_size() const {
  return _internal_triangles_size();
}
inline ::dai::schemas::TriangleListPrimitive* SceneEntity::mutable_triangles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.triangles)
  return _internal_mutable_triangles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::TriangleListPrimitive>* SceneEntity::mutable_triangles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.SceneEntity.triangles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_triangles();
}
inline const ::dai::schemas::TriangleListPrimitive& SceneEntity::triangles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.triangles)
  return _internal_triangles().Get(index);
}
inline ::dai::schemas::TriangleListPrimitive* SceneEntity::add_triangles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::TriangleListPrimitive* _add = _internal_mutable_triangles()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.SceneEntity.triangles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::TriangleListPrimitive>& SceneEntity::triangles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.SceneEntity.triangles)
  return _internal_triangles();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::TriangleListPrimitive>&
SceneEntity::_internal_triangles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.triangles_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::TriangleListPrimitive>*
SceneEntity::_internal_mutable_triangles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.triangles_;
}

// repeated .dai.schemas.TextPrimitive texts = 13;
inline int SceneEntity::_internal_texts_size() const {
  return _internal_texts().size();
}
inline int SceneEntity::texts_size() const {
  return _internal_texts_size();
}
inline ::dai::schemas::TextPrimitive* SceneEntity::mutable_texts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.texts)
  return _internal_mutable_texts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::TextPrimitive>* SceneEntity::mutable_texts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.SceneEntity.texts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_texts();
}
inline const ::dai::schemas::TextPrimitive& SceneEntity::texts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.texts)
  return _internal_texts().Get(index);
}
inline ::dai::schemas::TextPrimitive* SceneEntity::add_texts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::TextPrimitive* _add = _internal_mutable_texts()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.SceneEntity.texts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::TextPrimitive>& SceneEntity::texts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.SceneEntity.texts)
  return _internal_texts();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::TextPrimitive>&
SceneEntity::_internal_texts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.texts_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::TextPrimitive>*
SceneEntity::_internal_mutable_texts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.texts_;
}

// repeated .dai.schemas.ModelPrimitive models = 14;
inline int SceneEntity::_internal_models_size() const {
  return _internal_models().size();
}
inline int SceneEntity::models_size() const {
  return _internal_models_size();
}
inline ::dai::schemas::ModelPrimitive* SceneEntity::mutable_models(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dai.schemas.SceneEntity.models)
  return _internal_mutable_models()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::ModelPrimitive>* SceneEntity::mutable_models()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dai.schemas.SceneEntity.models)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_models();
}
inline const ::dai::schemas::ModelPrimitive& SceneEntity::models(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dai.schemas.SceneEntity.models)
  return _internal_models().Get(index);
}
inline ::dai::schemas::ModelPrimitive* SceneEntity::add_models() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dai::schemas::ModelPrimitive* _add = _internal_mutable_models()->Add();
  // @@protoc_insertion_point(field_add:dai.schemas.SceneEntity.models)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::ModelPrimitive>& SceneEntity::models() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dai.schemas.SceneEntity.models)
  return _internal_models();
}
inline const ::google::protobuf::RepeatedPtrField<::dai::schemas::ModelPrimitive>&
SceneEntity::_internal_models() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.models_;
}
inline ::google::protobuf::RepeatedPtrField<::dai::schemas::ModelPrimitive>*
SceneEntity::_internal_mutable_models() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.models_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace schemas
}  // namespace dai


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_daischemas_2fSceneEntity_2eproto_2epb_2eh
