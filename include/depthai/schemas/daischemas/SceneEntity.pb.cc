// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daischemas/SceneEntity.proto

#include "daischemas/SceneEntity.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace dai {
namespace schemas {

inline constexpr SceneEntity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        metadata_{},
        arrows_{},
        cubes_{},
        spheres_{},
        cylinders_{},
        lines_{},
        triangles_{},
        texts_{},
        models_{},
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        lifetime_{nullptr},
        frame_locked_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SceneEntity::SceneEntity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SceneEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEntityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEntityDefaultTypeInternal() {}
  union {
    SceneEntity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEntityDefaultTypeInternal _SceneEntity_default_instance_;
}  // namespace schemas
}  // namespace dai
static ::_pb::Metadata file_level_metadata_daischemas_2fSceneEntity_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_daischemas_2fSceneEntity_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_daischemas_2fSceneEntity_2eproto = nullptr;
const ::uint32_t TableStruct_daischemas_2fSceneEntity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.frame_id_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.lifetime_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.frame_locked_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.arrows_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.cubes_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.spheres_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.cylinders_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.lines_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.triangles_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.texts_),
    PROTOBUF_FIELD_OFFSET(::dai::schemas::SceneEntity, _impl_.models_),
    0,
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 22, -1, sizeof(::dai::schemas::SceneEntity)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dai::schemas::_SceneEntity_default_instance_._instance,
};
const char descriptor_table_protodef_daischemas_2fSceneEntity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034daischemas/SceneEntity.proto\022\013dai.sche"
    "mas\032\037daischemas/ArrowPrimitive.proto\032\036da"
    "ischemas/CubePrimitive.proto\032\"daischemas"
    "/CylinderPrimitive.proto\032\035daischemas/Key"
    "ValuePair.proto\032\036daischemas/LinePrimitiv"
    "e.proto\032\037daischemas/ModelPrimitive.proto"
    "\032 daischemas/SpherePrimitive.proto\032\036dais"
    "chemas/TextPrimitive.proto\032&daischemas/T"
    "riangleListPrimitive.proto\032\036google/proto"
    "buf/duration.proto\032\037google/protobuf/time"
    "stamp.proto\"\276\004\n\013SceneEntity\022-\n\ttimestamp"
    "\030\001 \001(\0132\032.google.protobuf.Timestamp\022\020\n\010fr"
    "ame_id\030\002 \001(\t\022\n\n\002id\030\003 \001(\t\022+\n\010lifetime\030\004 \001"
    "(\0132\031.google.protobuf.Duration\022\024\n\014frame_l"
    "ocked\030\005 \001(\010\022+\n\010metadata\030\006 \003(\0132\031.dai.sche"
    "mas.KeyValuePair\022+\n\006arrows\030\007 \003(\0132\033.dai.s"
    "chemas.ArrowPrimitive\022)\n\005cubes\030\010 \003(\0132\032.d"
    "ai.schemas.CubePrimitive\022-\n\007spheres\030\t \003("
    "\0132\034.dai.schemas.SpherePrimitive\0221\n\tcylin"
    "ders\030\n \003(\0132\036.dai.schemas.CylinderPrimiti"
    "ve\022)\n\005lines\030\013 \003(\0132\032.dai.schemas.LinePrim"
    "itive\0225\n\ttriangles\030\014 \003(\0132\".dai.schemas.T"
    "riangleListPrimitive\022)\n\005texts\030\r \003(\0132\032.da"
    "i.schemas.TextPrimitive\022+\n\006models\030\016 \003(\0132"
    "\033.dai.schemas.ModelPrimitiveb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_daischemas_2fSceneEntity_2eproto_deps[11] =
    {
        &::descriptor_table_daischemas_2fArrowPrimitive_2eproto,
        &::descriptor_table_daischemas_2fCubePrimitive_2eproto,
        &::descriptor_table_daischemas_2fCylinderPrimitive_2eproto,
        &::descriptor_table_daischemas_2fKeyValuePair_2eproto,
        &::descriptor_table_daischemas_2fLinePrimitive_2eproto,
        &::descriptor_table_daischemas_2fModelPrimitive_2eproto,
        &::descriptor_table_daischemas_2fSpherePrimitive_2eproto,
        &::descriptor_table_daischemas_2fTextPrimitive_2eproto,
        &::descriptor_table_daischemas_2fTriangleListPrimitive_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_daischemas_2fSceneEntity_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_daischemas_2fSceneEntity_2eproto = {
    false,
    false,
    996,
    descriptor_table_protodef_daischemas_2fSceneEntity_2eproto,
    "daischemas/SceneEntity.proto",
    &descriptor_table_daischemas_2fSceneEntity_2eproto_once,
    descriptor_table_daischemas_2fSceneEntity_2eproto_deps,
    11,
    1,
    schemas,
    file_default_instances,
    TableStruct_daischemas_2fSceneEntity_2eproto::offsets,
    file_level_metadata_daischemas_2fSceneEntity_2eproto,
    file_level_enum_descriptors_daischemas_2fSceneEntity_2eproto,
    file_level_service_descriptors_daischemas_2fSceneEntity_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_daischemas_2fSceneEntity_2eproto_getter() {
  return &descriptor_table_daischemas_2fSceneEntity_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_daischemas_2fSceneEntity_2eproto(&descriptor_table_daischemas_2fSceneEntity_2eproto);
namespace dai {
namespace schemas {
// ===================================================================

class SceneEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<SceneEntity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const SceneEntity* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Duration& lifetime(const SceneEntity* msg);
  static void set_has_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& SceneEntity::_Internal::timestamp(const SceneEntity* msg) {
  return *msg->_impl_.timestamp_;
}
const ::google::protobuf::Duration& SceneEntity::_Internal::lifetime(const SceneEntity* msg) {
  return *msg->_impl_.lifetime_;
}
void SceneEntity::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SceneEntity::clear_lifetime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lifetime_ != nullptr) _impl_.lifetime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SceneEntity::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_.Clear();
}
void SceneEntity::clear_arrows() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.arrows_.Clear();
}
void SceneEntity::clear_cubes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cubes_.Clear();
}
void SceneEntity::clear_spheres() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spheres_.Clear();
}
void SceneEntity::clear_cylinders() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cylinders_.Clear();
}
void SceneEntity::clear_lines() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lines_.Clear();
}
void SceneEntity::clear_triangles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.triangles_.Clear();
}
void SceneEntity::clear_texts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.texts_.Clear();
}
void SceneEntity::clear_models() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.models_.Clear();
}
SceneEntity::SceneEntity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dai.schemas.SceneEntity)
}
inline PROTOBUF_NDEBUG_INLINE SceneEntity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        metadata_{visibility, arena, from.metadata_},
        arrows_{visibility, arena, from.arrows_},
        cubes_{visibility, arena, from.cubes_},
        spheres_{visibility, arena, from.spheres_},
        cylinders_{visibility, arena, from.cylinders_},
        lines_{visibility, arena, from.lines_},
        triangles_{visibility, arena, from.triangles_},
        texts_{visibility, arena, from.texts_},
        models_{visibility, arena, from.models_},
        frame_id_(arena, from.frame_id_),
        id_(arena, from.id_) {}

SceneEntity::SceneEntity(
    ::google::protobuf::Arena* arena,
    const SceneEntity& from)
    : ::google::protobuf::Message(arena) {
  SceneEntity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;
  _impl_.lifetime_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Duration>(arena, *from._impl_.lifetime_)
                : nullptr;
  _impl_.frame_locked_ = from._impl_.frame_locked_;

  // @@protoc_insertion_point(copy_constructor:dai.schemas.SceneEntity)
}
inline PROTOBUF_NDEBUG_INLINE SceneEntity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        metadata_{visibility, arena},
        arrows_{visibility, arena},
        cubes_{visibility, arena},
        spheres_{visibility, arena},
        cylinders_{visibility, arena},
        lines_{visibility, arena},
        triangles_{visibility, arena},
        texts_{visibility, arena},
        models_{visibility, arena},
        frame_id_(arena),
        id_(arena) {}

inline void SceneEntity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, frame_locked_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::frame_locked_));
}
SceneEntity::~SceneEntity() {
  // @@protoc_insertion_point(destructor:dai.schemas.SceneEntity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SceneEntity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.frame_id_.Destroy();
  _impl_.id_.Destroy();
  delete _impl_.timestamp_;
  delete _impl_.lifetime_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SceneEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:dai.schemas.SceneEntity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.arrows_.Clear();
  _impl_.cubes_.Clear();
  _impl_.spheres_.Clear();
  _impl_.cylinders_.Clear();
  _impl_.lines_.Clear();
  _impl_.triangles_.Clear();
  _impl_.texts_.Clear();
  _impl_.models_.Clear();
  _impl_.frame_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.lifetime_ != nullptr);
      _impl_.lifetime_->Clear();
    }
  }
  _impl_.frame_locked_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SceneEntity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 11, 50, 2> SceneEntity::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    11,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SceneEntity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.timestamp_)}},
    // string frame_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.frame_id_)}},
    // string id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.id_)}},
    // .google.protobuf.Duration lifetime = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.lifetime_)}},
    // bool frame_locked = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SceneEntity, _impl_.frame_locked_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.frame_locked_)}},
    // repeated .dai.schemas.KeyValuePair metadata = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 2, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.metadata_)}},
    // repeated .dai.schemas.ArrowPrimitive arrows = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 3, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.arrows_)}},
    // repeated .dai.schemas.CubePrimitive cubes = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 4, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.cubes_)}},
    // repeated .dai.schemas.SpherePrimitive spheres = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 5, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.spheres_)}},
    // repeated .dai.schemas.CylinderPrimitive cylinders = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 6, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.cylinders_)}},
    // repeated .dai.schemas.LinePrimitive lines = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 7, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.lines_)}},
    // repeated .dai.schemas.TriangleListPrimitive triangles = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 8, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.triangles_)}},
    // repeated .dai.schemas.TextPrimitive texts = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 9, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.texts_)}},
    // repeated .dai.schemas.ModelPrimitive models = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 10, PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.models_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string frame_id = 2;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string id = 3;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Duration lifetime = 4;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.lifetime_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool frame_locked = 5;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.frame_locked_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .dai.schemas.KeyValuePair metadata = 6;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.metadata_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.ArrowPrimitive arrows = 7;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.arrows_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.CubePrimitive cubes = 8;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.cubes_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.SpherePrimitive spheres = 9;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.spheres_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.CylinderPrimitive cylinders = 10;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.cylinders_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.LinePrimitive lines = 11;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.lines_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.TriangleListPrimitive triangles = 12;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.triangles_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.TextPrimitive texts = 13;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.texts_), -1, 9,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dai.schemas.ModelPrimitive models = 14;
    {PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.models_), -1, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::KeyValuePair>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::ArrowPrimitive>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::CubePrimitive>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::SpherePrimitive>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::CylinderPrimitive>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::LinePrimitive>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::TriangleListPrimitive>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::TextPrimitive>()},
    {::_pbi::TcParser::GetTable<::dai::schemas::ModelPrimitive>()},
  }}, {{
    "\27\0\10\2\0\0\0\0\0\0\0\0\0\0\0\0"
    "dai.schemas.SceneEntity"
    "frame_id"
    "id"
  }},
};

::uint8_t* SceneEntity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dai.schemas.SceneEntity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string frame_id = 2;
  if (!this->_internal_frame_id().empty()) {
    const std::string& _s = this->_internal_frame_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dai.schemas.SceneEntity.frame_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dai.schemas.SceneEntity.id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .google.protobuf.Duration lifetime = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::lifetime(this),
        _Internal::lifetime(this).GetCachedSize(), target, stream);
  }

  // bool frame_locked = 5;
  if (this->_internal_frame_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_frame_locked(), target);
  }

  // repeated .dai.schemas.KeyValuePair metadata = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.ArrowPrimitive arrows = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arrows_size()); i < n; i++) {
    const auto& repfield = this->_internal_arrows().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.CubePrimitive cubes = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cubes_size()); i < n; i++) {
    const auto& repfield = this->_internal_cubes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.SpherePrimitive spheres = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spheres_size()); i < n; i++) {
    const auto& repfield = this->_internal_spheres().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.CylinderPrimitive cylinders = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cylinders_size()); i < n; i++) {
    const auto& repfield = this->_internal_cylinders().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.LinePrimitive lines = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_lines().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.TriangleListPrimitive triangles = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_triangles_size()); i < n; i++) {
    const auto& repfield = this->_internal_triangles().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.TextPrimitive texts = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_texts_size()); i < n; i++) {
    const auto& repfield = this->_internal_texts().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dai.schemas.ModelPrimitive models = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_models().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dai.schemas.SceneEntity)
  return target;
}

::size_t SceneEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dai.schemas.SceneEntity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dai.schemas.KeyValuePair metadata = 6;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_internal_metadata()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.ArrowPrimitive arrows = 7;
  total_size += 1UL * this->_internal_arrows_size();
  for (const auto& msg : this->_internal_arrows()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.CubePrimitive cubes = 8;
  total_size += 1UL * this->_internal_cubes_size();
  for (const auto& msg : this->_internal_cubes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.SpherePrimitive spheres = 9;
  total_size += 1UL * this->_internal_spheres_size();
  for (const auto& msg : this->_internal_spheres()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.CylinderPrimitive cylinders = 10;
  total_size += 1UL * this->_internal_cylinders_size();
  for (const auto& msg : this->_internal_cylinders()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.LinePrimitive lines = 11;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->_internal_lines()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.TriangleListPrimitive triangles = 12;
  total_size += 1UL * this->_internal_triangles_size();
  for (const auto& msg : this->_internal_triangles()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.TextPrimitive texts = 13;
  total_size += 1UL * this->_internal_texts_size();
  for (const auto& msg : this->_internal_texts()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dai.schemas.ModelPrimitive models = 14;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->_internal_models()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string frame_id = 2;
  if (!this->_internal_frame_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_frame_id());
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
    }

    // .google.protobuf.Duration lifetime = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lifetime_);
    }

  }
  // bool frame_locked = 5;
  if (this->_internal_frame_locked() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SceneEntity::_class_data_ = {
    SceneEntity::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SceneEntity::GetClassData() const {
  return &_class_data_;
}

void SceneEntity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SceneEntity*>(&to_msg);
  auto& from = static_cast<const SceneEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dai.schemas.SceneEntity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metadata()->MergeFrom(
      from._internal_metadata());
  _this->_internal_mutable_arrows()->MergeFrom(
      from._internal_arrows());
  _this->_internal_mutable_cubes()->MergeFrom(
      from._internal_cubes());
  _this->_internal_mutable_spheres()->MergeFrom(
      from._internal_spheres());
  _this->_internal_mutable_cylinders()->MergeFrom(
      from._internal_cylinders());
  _this->_internal_mutable_lines()->MergeFrom(
      from._internal_lines());
  _this->_internal_mutable_triangles()->MergeFrom(
      from._internal_triangles());
  _this->_internal_mutable_texts()->MergeFrom(
      from._internal_texts());
  _this->_internal_mutable_models()->MergeFrom(
      from._internal_models());
  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_lifetime()->::google::protobuf::Duration::MergeFrom(
          from._internal_lifetime());
    }
  }
  if (from._internal_frame_locked() != 0) {
    _this->_internal_set_frame_locked(from._internal_frame_locked());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEntity::CopyFrom(const SceneEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dai.schemas.SceneEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SceneEntity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SceneEntity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SceneEntity::InternalSwap(SceneEntity* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.arrows_.InternalSwap(&other->_impl_.arrows_);
  _impl_.cubes_.InternalSwap(&other->_impl_.cubes_);
  _impl_.spheres_.InternalSwap(&other->_impl_.spheres_);
  _impl_.cylinders_.InternalSwap(&other->_impl_.cylinders_);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  _impl_.triangles_.InternalSwap(&other->_impl_.triangles_);
  _impl_.texts_.InternalSwap(&other->_impl_.texts_);
  _impl_.models_.InternalSwap(&other->_impl_.models_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.frame_locked_)
      + sizeof(SceneEntity::_impl_.frame_locked_)
      - PROTOBUF_FIELD_OFFSET(SceneEntity, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata SceneEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_daischemas_2fSceneEntity_2eproto_getter, &descriptor_table_daischemas_2fSceneEntity_2eproto_once,
      file_level_metadata_daischemas_2fSceneEntity_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace schemas
}  // namespace dai
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
