// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/ModelPrimitive.proto

#include "foxglove/ModelPrimitive.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace foxglove {

inline constexpr ModelPrimitive::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        media_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pose_{nullptr},
        scale_{nullptr},
        color_{nullptr},
        override_color_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ModelPrimitive::ModelPrimitive(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ModelPrimitiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelPrimitiveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelPrimitiveDefaultTypeInternal() {}
  union {
    ModelPrimitive _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelPrimitiveDefaultTypeInternal _ModelPrimitive_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_foxglove_2fModelPrimitive_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_foxglove_2fModelPrimitive_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_foxglove_2fModelPrimitive_2eproto = nullptr;
const ::uint32_t TableStruct_foxglove_2fModelPrimitive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.pose_),
    PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.scale_),
    PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.override_color_),
    PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.url_),
    PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.media_type_),
    PROTOBUF_FIELD_OFFSET(::foxglove::ModelPrimitive, _impl_.data_),
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::foxglove::ModelPrimitive)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::foxglove::_ModelPrimitive_default_instance_._instance,
};
const char descriptor_table_protodef_foxglove_2fModelPrimitive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035foxglove/ModelPrimitive.proto\022\010foxglov"
    "e\032\024foxglove/Color.proto\032\023foxglove/Pose.p"
    "roto\032\026foxglove/Vector3.proto\"\267\001\n\016ModelPr"
    "imitive\022\034\n\004pose\030\001 \001(\0132\016.foxglove.Pose\022 \n"
    "\005scale\030\002 \001(\0132\021.foxglove.Vector3\022\036\n\005color"
    "\030\003 \001(\0132\017.foxglove.Color\022\026\n\016override_colo"
    "r\030\004 \001(\010\022\013\n\003url\030\005 \001(\t\022\022\n\nmedia_type\030\006 \001(\t"
    "\022\014\n\004data\030\007 \001(\014b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_2fModelPrimitive_2eproto_deps[3] =
    {
        &::descriptor_table_foxglove_2fColor_2eproto,
        &::descriptor_table_foxglove_2fPose_2eproto,
        &::descriptor_table_foxglove_2fVector3_2eproto,
};
static ::absl::once_flag descriptor_table_foxglove_2fModelPrimitive_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_foxglove_2fModelPrimitive_2eproto = {
    false,
    false,
    302,
    descriptor_table_protodef_foxglove_2fModelPrimitive_2eproto,
    "foxglove/ModelPrimitive.proto",
    &descriptor_table_foxglove_2fModelPrimitive_2eproto_once,
    descriptor_table_foxglove_2fModelPrimitive_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_foxglove_2fModelPrimitive_2eproto::offsets,
    file_level_metadata_foxglove_2fModelPrimitive_2eproto,
    file_level_enum_descriptors_foxglove_2fModelPrimitive_2eproto,
    file_level_service_descriptors_foxglove_2fModelPrimitive_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_foxglove_2fModelPrimitive_2eproto_getter() {
  return &descriptor_table_foxglove_2fModelPrimitive_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_foxglove_2fModelPrimitive_2eproto(&descriptor_table_foxglove_2fModelPrimitive_2eproto);
namespace foxglove {
// ===================================================================

class ModelPrimitive::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelPrimitive>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_._has_bits_);
  static const ::foxglove::Pose& pose(const ModelPrimitive* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::foxglove::Vector3& scale(const ModelPrimitive* msg);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::foxglove::Color& color(const ModelPrimitive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::foxglove::Pose& ModelPrimitive::_Internal::pose(const ModelPrimitive* msg) {
  return *msg->_impl_.pose_;
}
const ::foxglove::Vector3& ModelPrimitive::_Internal::scale(const ModelPrimitive* msg) {
  return *msg->_impl_.scale_;
}
const ::foxglove::Color& ModelPrimitive::_Internal::color(const ModelPrimitive* msg) {
  return *msg->_impl_.color_;
}
void ModelPrimitive::clear_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ModelPrimitive::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scale_ != nullptr) _impl_.scale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ModelPrimitive::clear_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ModelPrimitive::ModelPrimitive(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.ModelPrimitive)
}
inline PROTOBUF_NDEBUG_INLINE ModelPrimitive::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        url_(arena, from.url_),
        media_type_(arena, from.media_type_),
        data_(arena, from.data_) {}

ModelPrimitive::ModelPrimitive(
    ::google::protobuf::Arena* arena,
    const ModelPrimitive& from)
    : ::google::protobuf::Message(arena) {
  ModelPrimitive* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::foxglove::Pose>(arena, *from._impl_.pose_)
                : nullptr;
  _impl_.scale_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::foxglove::Vector3>(arena, *from._impl_.scale_)
                : nullptr;
  _impl_.color_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::foxglove::Color>(arena, *from._impl_.color_)
                : nullptr;
  _impl_.override_color_ = from._impl_.override_color_;

  // @@protoc_insertion_point(copy_constructor:foxglove.ModelPrimitive)
}
inline PROTOBUF_NDEBUG_INLINE ModelPrimitive::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        url_(arena),
        media_type_(arena),
        data_(arena) {}

inline void ModelPrimitive::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_),
           0,
           offsetof(Impl_, override_color_) -
               offsetof(Impl_, pose_) +
               sizeof(Impl_::override_color_));
}
ModelPrimitive::~ModelPrimitive() {
  // @@protoc_insertion_point(destructor:foxglove.ModelPrimitive)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ModelPrimitive::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.url_.Destroy();
  _impl_.media_type_.Destroy();
  _impl_.data_.Destroy();
  delete _impl_.pose_;
  delete _impl_.scale_;
  delete _impl_.color_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ModelPrimitive::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.ModelPrimitive)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.media_type_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.scale_ != nullptr);
      _impl_.scale_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
  }
  _impl_.override_color_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ModelPrimitive::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 3, 45, 2> ModelPrimitive::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ModelPrimitive_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .foxglove.Pose pose = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.pose_)}},
    // .foxglove.Vector3 scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.scale_)}},
    // .foxglove.Color color = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.color_)}},
    // bool override_color = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ModelPrimitive, _impl_.override_color_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.override_color_)}},
    // string url = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.url_)}},
    // string media_type = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.media_type_)}},
    // bytes data = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .foxglove.Pose pose = 1;
    {PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .foxglove.Vector3 scale = 2;
    {PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .foxglove.Color color = 3;
    {PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.color_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool override_color = 4;
    {PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.override_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string url = 5;
    {PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string media_type = 6;
    {PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.media_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes data = 7;
    {PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::foxglove::Pose>()},
    {::_pbi::TcParser::GetTable<::foxglove::Vector3>()},
    {::_pbi::TcParser::GetTable<::foxglove::Color>()},
  }}, {{
    "\27\0\0\0\0\3\12\0"
    "foxglove.ModelPrimitive"
    "url"
    "media_type"
  }},
};

::uint8_t* ModelPrimitive::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.ModelPrimitive)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .foxglove.Pose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // .foxglove.Vector3 scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // .foxglove.Color color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // bool override_color = 4;
  if (this->_internal_override_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_override_color(), target);
  }

  // string url = 5;
  if (!this->_internal_url().empty()) {
    const std::string& _s = this->_internal_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.ModelPrimitive.url");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string media_type = 6;
  if (!this->_internal_media_type().empty()) {
    const std::string& _s = this->_internal_media_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.ModelPrimitive.media_type");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.ModelPrimitive)
  return target;
}

::size_t ModelPrimitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.ModelPrimitive)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 5;
  if (!this->_internal_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_url());
  }

  // string media_type = 6;
  if (!this->_internal_media_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_media_type());
  }

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .foxglove.Pose pose = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pose_);
    }

    // .foxglove.Vector3 scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.scale_);
    }

    // .foxglove.Color color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.color_);
    }

  }
  // bool override_color = 4;
  if (this->_internal_override_color() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ModelPrimitive::_class_data_ = {
    ModelPrimitive::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ModelPrimitive::GetClassData() const {
  return &_class_data_;
}

void ModelPrimitive::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ModelPrimitive*>(&to_msg);
  auto& from = static_cast<const ModelPrimitive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.ModelPrimitive)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_media_type().empty()) {
    _this->_internal_set_media_type(from._internal_media_type());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pose()->::foxglove::Pose::MergeFrom(
          from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_scale()->::foxglove::Vector3::MergeFrom(
          from._internal_scale());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_color()->::foxglove::Color::MergeFrom(
          from._internal_color());
    }
  }
  if (from._internal_override_color() != 0) {
    _this->_internal_set_override_color(from._internal_override_color());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModelPrimitive::CopyFrom(const ModelPrimitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.ModelPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ModelPrimitive::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ModelPrimitive::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ModelPrimitive::InternalSwap(ModelPrimitive* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.media_type_, &other->_impl_.media_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.override_color_)
      + sizeof(ModelPrimitive::_impl_.override_color_)
      - PROTOBUF_FIELD_OFFSET(ModelPrimitive, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::google::protobuf::Metadata ModelPrimitive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_foxglove_2fModelPrimitive_2eproto_getter, &descriptor_table_foxglove_2fModelPrimitive_2eproto_once,
      file_level_metadata_foxglove_2fModelPrimitive_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
