// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/PackedElementField.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fPackedElementField_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fPackedElementField_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fPackedElementField_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fPackedElementField_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_foxglove_2fPackedElementField_2eproto;
namespace foxglove {
class PackedElementField;
struct PackedElementFieldDefaultTypeInternal;
extern PackedElementFieldDefaultTypeInternal _PackedElementField_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace foxglove {
enum PackedElementField_NumericType : int {
  PackedElementField_NumericType_UNKNOWN = 0,
  PackedElementField_NumericType_UINT8 = 1,
  PackedElementField_NumericType_INT8 = 2,
  PackedElementField_NumericType_UINT16 = 3,
  PackedElementField_NumericType_INT16 = 4,
  PackedElementField_NumericType_UINT32 = 5,
  PackedElementField_NumericType_INT32 = 6,
  PackedElementField_NumericType_FLOAT32 = 7,
  PackedElementField_NumericType_FLOAT64 = 8,
  PackedElementField_NumericType_PackedElementField_NumericType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PackedElementField_NumericType_PackedElementField_NumericType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PackedElementField_NumericType_IsValid(int value);
extern const uint32_t PackedElementField_NumericType_internal_data_[];
constexpr PackedElementField_NumericType PackedElementField_NumericType_NumericType_MIN = static_cast<PackedElementField_NumericType>(0);
constexpr PackedElementField_NumericType PackedElementField_NumericType_NumericType_MAX = static_cast<PackedElementField_NumericType>(8);
constexpr int PackedElementField_NumericType_NumericType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
PackedElementField_NumericType_descriptor();
template <typename T>
const std::string& PackedElementField_NumericType_Name(T value) {
  static_assert(std::is_same<T, PackedElementField_NumericType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NumericType_Name().");
  return PackedElementField_NumericType_Name(static_cast<PackedElementField_NumericType>(value));
}
template <>
inline const std::string& PackedElementField_NumericType_Name(PackedElementField_NumericType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PackedElementField_NumericType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool PackedElementField_NumericType_Parse(absl::string_view name, PackedElementField_NumericType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PackedElementField_NumericType>(
      PackedElementField_NumericType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PackedElementField final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.PackedElementField) */ {
 public:
  inline PackedElementField() : PackedElementField(nullptr) {}
  ~PackedElementField() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PackedElementField(::google::protobuf::internal::ConstantInitialized);

  inline PackedElementField(const PackedElementField& from)
      : PackedElementField(nullptr, from) {}
  PackedElementField(PackedElementField&& from) noexcept
    : PackedElementField() {
    *this = ::std::move(from);
  }

  inline PackedElementField& operator=(const PackedElementField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackedElementField& operator=(PackedElementField&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackedElementField& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackedElementField* internal_default_instance() {
    return reinterpret_cast<const PackedElementField*>(
               &_PackedElementField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PackedElementField& a, PackedElementField& b) {
    a.Swap(&b);
  }
  inline void Swap(PackedElementField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackedElementField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackedElementField* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackedElementField>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PackedElementField& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PackedElementField& from) {
    PackedElementField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PackedElementField* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "foxglove.PackedElementField";
  }
  protected:
  explicit PackedElementField(::google::protobuf::Arena* arena);
  PackedElementField(::google::protobuf::Arena* arena, const PackedElementField& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using NumericType = PackedElementField_NumericType;
  static constexpr NumericType UNKNOWN = PackedElementField_NumericType_UNKNOWN;
  static constexpr NumericType UINT8 = PackedElementField_NumericType_UINT8;
  static constexpr NumericType INT8 = PackedElementField_NumericType_INT8;
  static constexpr NumericType UINT16 = PackedElementField_NumericType_UINT16;
  static constexpr NumericType INT16 = PackedElementField_NumericType_INT16;
  static constexpr NumericType UINT32 = PackedElementField_NumericType_UINT32;
  static constexpr NumericType INT32 = PackedElementField_NumericType_INT32;
  static constexpr NumericType FLOAT32 = PackedElementField_NumericType_FLOAT32;
  static constexpr NumericType FLOAT64 = PackedElementField_NumericType_FLOAT64;
  static inline bool NumericType_IsValid(int value) {
    return PackedElementField_NumericType_IsValid(value);
  }
  static constexpr NumericType NumericType_MIN = PackedElementField_NumericType_NumericType_MIN;
  static constexpr NumericType NumericType_MAX = PackedElementField_NumericType_NumericType_MAX;
  static constexpr int NumericType_ARRAYSIZE = PackedElementField_NumericType_NumericType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NumericType_descriptor() {
    return PackedElementField_NumericType_descriptor();
  }
  template <typename T>
  static inline const std::string& NumericType_Name(T value) {
    return PackedElementField_NumericType_Name(value);
  }
  static inline bool NumericType_Parse(absl::string_view name, NumericType* value) {
    return PackedElementField_NumericType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // fixed32 offset = 2;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // .foxglove.PackedElementField.NumericType type = 3;
  void clear_type() ;
  ::foxglove::PackedElementField_NumericType type() const;
  void set_type(::foxglove::PackedElementField_NumericType value);

  private:
  ::foxglove::PackedElementField_NumericType _internal_type() const;
  void _internal_set_type(::foxglove::PackedElementField_NumericType value);

  public:
  // @@protoc_insertion_point(class_scope:foxglove.PackedElementField)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint32_t offset_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fPackedElementField_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PackedElementField

// string name = 1;
inline void PackedElementField::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PackedElementField::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.PackedElementField.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PackedElementField::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:foxglove.PackedElementField.name)
}
inline std::string* PackedElementField::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:foxglove.PackedElementField.name)
  return _s;
}
inline const std::string& PackedElementField::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void PackedElementField::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PackedElementField::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PackedElementField::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:foxglove.PackedElementField.name)
  return _impl_.name_.Release();
}
inline void PackedElementField::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.PackedElementField.name)
}

// fixed32 offset = 2;
inline void PackedElementField::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = 0u;
}
inline ::uint32_t PackedElementField::offset() const {
  // @@protoc_insertion_point(field_get:foxglove.PackedElementField.offset)
  return _internal_offset();
}
inline void PackedElementField::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:foxglove.PackedElementField.offset)
}
inline ::uint32_t PackedElementField::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void PackedElementField::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// .foxglove.PackedElementField.NumericType type = 3;
inline void PackedElementField::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::foxglove::PackedElementField_NumericType PackedElementField::type() const {
  // @@protoc_insertion_point(field_get:foxglove.PackedElementField.type)
  return _internal_type();
}
inline void PackedElementField::set_type(::foxglove::PackedElementField_NumericType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:foxglove.PackedElementField.type)
}
inline ::foxglove::PackedElementField_NumericType PackedElementField::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::foxglove::PackedElementField_NumericType>(_impl_.type_);
}
inline void PackedElementField::_internal_set_type(::foxglove::PackedElementField_NumericType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::foxglove::PackedElementField_NumericType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::foxglove::PackedElementField_NumericType>() {
  return ::foxglove::PackedElementField_NumericType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_foxglove_2fPackedElementField_2eproto_2epb_2eh
