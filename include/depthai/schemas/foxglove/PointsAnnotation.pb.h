// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/PointsAnnotation.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fPointsAnnotation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fPointsAnnotation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "foxglove/Color.pb.h"
#include "foxglove/Point2.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fPointsAnnotation_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fPointsAnnotation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_foxglove_2fPointsAnnotation_2eproto;
namespace foxglove {
class PointsAnnotation;
struct PointsAnnotationDefaultTypeInternal;
extern PointsAnnotationDefaultTypeInternal _PointsAnnotation_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace foxglove {
enum PointsAnnotation_Type : int {
  PointsAnnotation_Type_UNKNOWN = 0,
  PointsAnnotation_Type_POINTS = 1,
  PointsAnnotation_Type_LINE_LOOP = 2,
  PointsAnnotation_Type_LINE_STRIP = 3,
  PointsAnnotation_Type_LINE_LIST = 4,
  PointsAnnotation_Type_PointsAnnotation_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PointsAnnotation_Type_PointsAnnotation_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PointsAnnotation_Type_IsValid(int value);
extern const uint32_t PointsAnnotation_Type_internal_data_[];
constexpr PointsAnnotation_Type PointsAnnotation_Type_Type_MIN = static_cast<PointsAnnotation_Type>(0);
constexpr PointsAnnotation_Type PointsAnnotation_Type_Type_MAX = static_cast<PointsAnnotation_Type>(4);
constexpr int PointsAnnotation_Type_Type_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
PointsAnnotation_Type_descriptor();
template <typename T>
const std::string& PointsAnnotation_Type_Name(T value) {
  static_assert(std::is_same<T, PointsAnnotation_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return PointsAnnotation_Type_Name(static_cast<PointsAnnotation_Type>(value));
}
template <>
inline const std::string& PointsAnnotation_Type_Name(PointsAnnotation_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PointsAnnotation_Type_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool PointsAnnotation_Type_Parse(absl::string_view name, PointsAnnotation_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PointsAnnotation_Type>(
      PointsAnnotation_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PointsAnnotation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.PointsAnnotation) */ {
 public:
  inline PointsAnnotation() : PointsAnnotation(nullptr) {}
  ~PointsAnnotation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PointsAnnotation(::google::protobuf::internal::ConstantInitialized);

  inline PointsAnnotation(const PointsAnnotation& from)
      : PointsAnnotation(nullptr, from) {}
  PointsAnnotation(PointsAnnotation&& from) noexcept
    : PointsAnnotation() {
    *this = ::std::move(from);
  }

  inline PointsAnnotation& operator=(const PointsAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointsAnnotation& operator=(PointsAnnotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointsAnnotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointsAnnotation* internal_default_instance() {
    return reinterpret_cast<const PointsAnnotation*>(
               &_PointsAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointsAnnotation& a, PointsAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(PointsAnnotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointsAnnotation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointsAnnotation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointsAnnotation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PointsAnnotation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PointsAnnotation& from) {
    PointsAnnotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PointsAnnotation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "foxglove.PointsAnnotation";
  }
  protected:
  explicit PointsAnnotation(::google::protobuf::Arena* arena);
  PointsAnnotation(::google::protobuf::Arena* arena, const PointsAnnotation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = PointsAnnotation_Type;
  static constexpr Type UNKNOWN = PointsAnnotation_Type_UNKNOWN;
  static constexpr Type POINTS = PointsAnnotation_Type_POINTS;
  static constexpr Type LINE_LOOP = PointsAnnotation_Type_LINE_LOOP;
  static constexpr Type LINE_STRIP = PointsAnnotation_Type_LINE_STRIP;
  static constexpr Type LINE_LIST = PointsAnnotation_Type_LINE_LIST;
  static inline bool Type_IsValid(int value) {
    return PointsAnnotation_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = PointsAnnotation_Type_Type_MIN;
  static constexpr Type Type_MAX = PointsAnnotation_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = PointsAnnotation_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return PointsAnnotation_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return PointsAnnotation_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return PointsAnnotation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kOutlineColorsFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kOutlineColorFieldNumber = 4,
    kFillColorFieldNumber = 6,
    kThicknessFieldNumber = 7,
    kTypeFieldNumber = 2,
  };
  // repeated .foxglove.Point2 points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::foxglove::Point2* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::foxglove::Point2 >*
      mutable_points();
  private:
  const ::google::protobuf::RepeatedPtrField<::foxglove::Point2>& _internal_points() const;
  ::google::protobuf::RepeatedPtrField<::foxglove::Point2>* _internal_mutable_points();
  public:
  const ::foxglove::Point2& points(int index) const;
  ::foxglove::Point2* add_points();
  const ::google::protobuf::RepeatedPtrField< ::foxglove::Point2 >&
      points() const;
  // repeated .foxglove.Color outline_colors = 5;
  int outline_colors_size() const;
  private:
  int _internal_outline_colors_size() const;

  public:
  void clear_outline_colors() ;
  ::foxglove::Color* mutable_outline_colors(int index);
  ::google::protobuf::RepeatedPtrField< ::foxglove::Color >*
      mutable_outline_colors();
  private:
  const ::google::protobuf::RepeatedPtrField<::foxglove::Color>& _internal_outline_colors() const;
  ::google::protobuf::RepeatedPtrField<::foxglove::Color>* _internal_mutable_outline_colors();
  public:
  const ::foxglove::Color& outline_colors(int index) const;
  ::foxglove::Color* add_outline_colors();
  const ::google::protobuf::RepeatedPtrField< ::foxglove::Color >&
      outline_colors() const;
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .foxglove.Color outline_color = 4;
  bool has_outline_color() const;
  void clear_outline_color() ;
  const ::foxglove::Color& outline_color() const;
  PROTOBUF_NODISCARD ::foxglove::Color* release_outline_color();
  ::foxglove::Color* mutable_outline_color();
  void set_allocated_outline_color(::foxglove::Color* value);
  void unsafe_arena_set_allocated_outline_color(::foxglove::Color* value);
  ::foxglove::Color* unsafe_arena_release_outline_color();

  private:
  const ::foxglove::Color& _internal_outline_color() const;
  ::foxglove::Color* _internal_mutable_outline_color();

  public:
  // .foxglove.Color fill_color = 6;
  bool has_fill_color() const;
  void clear_fill_color() ;
  const ::foxglove::Color& fill_color() const;
  PROTOBUF_NODISCARD ::foxglove::Color* release_fill_color();
  ::foxglove::Color* mutable_fill_color();
  void set_allocated_fill_color(::foxglove::Color* value);
  void unsafe_arena_set_allocated_fill_color(::foxglove::Color* value);
  ::foxglove::Color* unsafe_arena_release_fill_color();

  private:
  const ::foxglove::Color& _internal_fill_color() const;
  ::foxglove::Color* _internal_mutable_fill_color();

  public:
  // double thickness = 7;
  void clear_thickness() ;
  double thickness() const;
  void set_thickness(double value);

  private:
  double _internal_thickness() const;
  void _internal_set_thickness(double value);

  public:
  // .foxglove.PointsAnnotation.Type type = 2;
  void clear_type() ;
  ::foxglove::PointsAnnotation_Type type() const;
  void set_type(::foxglove::PointsAnnotation_Type value);

  private:
  ::foxglove::PointsAnnotation_Type _internal_type() const;
  void _internal_set_type(::foxglove::PointsAnnotation_Type value);

  public:
  // @@protoc_insertion_point(class_scope:foxglove.PointsAnnotation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::foxglove::Point2 > points_;
    ::google::protobuf::RepeatedPtrField< ::foxglove::Color > outline_colors_;
    ::google::protobuf::Timestamp* timestamp_;
    ::foxglove::Color* outline_color_;
    ::foxglove::Color* fill_color_;
    double thickness_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fPointsAnnotation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PointsAnnotation

// .google.protobuf.Timestamp timestamp = 1;
inline bool PointsAnnotation::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& PointsAnnotation::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& PointsAnnotation::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.timestamp)
  return _internal_timestamp();
}
inline void PointsAnnotation::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.PointsAnnotation.timestamp)
}
inline ::google::protobuf::Timestamp* PointsAnnotation::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* PointsAnnotation::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:foxglove.PointsAnnotation.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PointsAnnotation::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* PointsAnnotation::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:foxglove.PointsAnnotation.timestamp)
  return _msg;
}
inline void PointsAnnotation::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:foxglove.PointsAnnotation.timestamp)
}

// .foxglove.PointsAnnotation.Type type = 2;
inline void PointsAnnotation::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::foxglove::PointsAnnotation_Type PointsAnnotation::type() const {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.type)
  return _internal_type();
}
inline void PointsAnnotation::set_type(::foxglove::PointsAnnotation_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:foxglove.PointsAnnotation.type)
}
inline ::foxglove::PointsAnnotation_Type PointsAnnotation::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::foxglove::PointsAnnotation_Type>(_impl_.type_);
}
inline void PointsAnnotation::_internal_set_type(::foxglove::PointsAnnotation_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// repeated .foxglove.Point2 points = 3;
inline int PointsAnnotation::_internal_points_size() const {
  return _internal_points().size();
}
inline int PointsAnnotation::points_size() const {
  return _internal_points_size();
}
inline ::foxglove::Point2* PointsAnnotation::mutable_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:foxglove.PointsAnnotation.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::foxglove::Point2>* PointsAnnotation::mutable_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:foxglove.PointsAnnotation.points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points();
}
inline const ::foxglove::Point2& PointsAnnotation::points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.points)
  return _internal_points().Get(index);
}
inline ::foxglove::Point2* PointsAnnotation::add_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::foxglove::Point2* _add = _internal_mutable_points()->Add();
  // @@protoc_insertion_point(field_add:foxglove.PointsAnnotation.points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::foxglove::Point2>& PointsAnnotation::points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:foxglove.PointsAnnotation.points)
  return _internal_points();
}
inline const ::google::protobuf::RepeatedPtrField<::foxglove::Point2>&
PointsAnnotation::_internal_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedPtrField<::foxglove::Point2>*
PointsAnnotation::_internal_mutable_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_;
}

// .foxglove.Color outline_color = 4;
inline bool PointsAnnotation::has_outline_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.outline_color_ != nullptr);
  return value;
}
inline const ::foxglove::Color& PointsAnnotation::_internal_outline_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::foxglove::Color* p = _impl_.outline_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Color&>(::foxglove::_Color_default_instance_);
}
inline const ::foxglove::Color& PointsAnnotation::outline_color() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.outline_color)
  return _internal_outline_color();
}
inline void PointsAnnotation::unsafe_arena_set_allocated_outline_color(::foxglove::Color* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.outline_color_);
  }
  _impl_.outline_color_ = reinterpret_cast<::foxglove::Color*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.PointsAnnotation.outline_color)
}
inline ::foxglove::Color* PointsAnnotation::release_outline_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::foxglove::Color* released = _impl_.outline_color_;
  _impl_.outline_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::foxglove::Color* PointsAnnotation::unsafe_arena_release_outline_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:foxglove.PointsAnnotation.outline_color)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::foxglove::Color* temp = _impl_.outline_color_;
  _impl_.outline_color_ = nullptr;
  return temp;
}
inline ::foxglove::Color* PointsAnnotation::_internal_mutable_outline_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.outline_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArena());
    _impl_.outline_color_ = reinterpret_cast<::foxglove::Color*>(p);
  }
  return _impl_.outline_color_;
}
inline ::foxglove::Color* PointsAnnotation::mutable_outline_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::foxglove::Color* _msg = _internal_mutable_outline_color();
  // @@protoc_insertion_point(field_mutable:foxglove.PointsAnnotation.outline_color)
  return _msg;
}
inline void PointsAnnotation::set_allocated_outline_color(::foxglove::Color* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.outline_color_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.outline_color_ = reinterpret_cast<::foxglove::Color*>(value);
  // @@protoc_insertion_point(field_set_allocated:foxglove.PointsAnnotation.outline_color)
}

// repeated .foxglove.Color outline_colors = 5;
inline int PointsAnnotation::_internal_outline_colors_size() const {
  return _internal_outline_colors().size();
}
inline int PointsAnnotation::outline_colors_size() const {
  return _internal_outline_colors_size();
}
inline ::foxglove::Color* PointsAnnotation::mutable_outline_colors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:foxglove.PointsAnnotation.outline_colors)
  return _internal_mutable_outline_colors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::foxglove::Color>* PointsAnnotation::mutable_outline_colors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:foxglove.PointsAnnotation.outline_colors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_outline_colors();
}
inline const ::foxglove::Color& PointsAnnotation::outline_colors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.outline_colors)
  return _internal_outline_colors().Get(index);
}
inline ::foxglove::Color* PointsAnnotation::add_outline_colors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::foxglove::Color* _add = _internal_mutable_outline_colors()->Add();
  // @@protoc_insertion_point(field_add:foxglove.PointsAnnotation.outline_colors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::foxglove::Color>& PointsAnnotation::outline_colors() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:foxglove.PointsAnnotation.outline_colors)
  return _internal_outline_colors();
}
inline const ::google::protobuf::RepeatedPtrField<::foxglove::Color>&
PointsAnnotation::_internal_outline_colors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outline_colors_;
}
inline ::google::protobuf::RepeatedPtrField<::foxglove::Color>*
PointsAnnotation::_internal_mutable_outline_colors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.outline_colors_;
}

// .foxglove.Color fill_color = 6;
inline bool PointsAnnotation::has_fill_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fill_color_ != nullptr);
  return value;
}
inline const ::foxglove::Color& PointsAnnotation::_internal_fill_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::foxglove::Color* p = _impl_.fill_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Color&>(::foxglove::_Color_default_instance_);
}
inline const ::foxglove::Color& PointsAnnotation::fill_color() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.fill_color)
  return _internal_fill_color();
}
inline void PointsAnnotation::unsafe_arena_set_allocated_fill_color(::foxglove::Color* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fill_color_);
  }
  _impl_.fill_color_ = reinterpret_cast<::foxglove::Color*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.PointsAnnotation.fill_color)
}
inline ::foxglove::Color* PointsAnnotation::release_fill_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::foxglove::Color* released = _impl_.fill_color_;
  _impl_.fill_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::foxglove::Color* PointsAnnotation::unsafe_arena_release_fill_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:foxglove.PointsAnnotation.fill_color)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::foxglove::Color* temp = _impl_.fill_color_;
  _impl_.fill_color_ = nullptr;
  return temp;
}
inline ::foxglove::Color* PointsAnnotation::_internal_mutable_fill_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.fill_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArena());
    _impl_.fill_color_ = reinterpret_cast<::foxglove::Color*>(p);
  }
  return _impl_.fill_color_;
}
inline ::foxglove::Color* PointsAnnotation::mutable_fill_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::foxglove::Color* _msg = _internal_mutable_fill_color();
  // @@protoc_insertion_point(field_mutable:foxglove.PointsAnnotation.fill_color)
  return _msg;
}
inline void PointsAnnotation::set_allocated_fill_color(::foxglove::Color* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fill_color_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.fill_color_ = reinterpret_cast<::foxglove::Color*>(value);
  // @@protoc_insertion_point(field_set_allocated:foxglove.PointsAnnotation.fill_color)
}

// double thickness = 7;
inline void PointsAnnotation::clear_thickness() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.thickness_ = 0;
}
inline double PointsAnnotation::thickness() const {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.thickness)
  return _internal_thickness();
}
inline void PointsAnnotation::set_thickness(double value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:foxglove.PointsAnnotation.thickness)
}
inline double PointsAnnotation::_internal_thickness() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.thickness_;
}
inline void PointsAnnotation::_internal_set_thickness(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.thickness_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::foxglove::PointsAnnotation_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::foxglove::PointsAnnotation_Type>() {
  return ::foxglove::PointsAnnotation_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_foxglove_2fPointsAnnotation_2eproto_2epb_2eh
