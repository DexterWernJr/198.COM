// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/CompressedVideo.proto

#include "foxglove/CompressedVideo.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace foxglove {

inline constexpr CompressedVideo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        format_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CompressedVideo::CompressedVideo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CompressedVideoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompressedVideoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompressedVideoDefaultTypeInternal() {}
  union {
    CompressedVideo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompressedVideoDefaultTypeInternal _CompressedVideo_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_foxglove_2fCompressedVideo_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_foxglove_2fCompressedVideo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_foxglove_2fCompressedVideo_2eproto = nullptr;
const ::uint32_t TableStruct_foxglove_2fCompressedVideo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_.frame_id_),
    PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::foxglove::CompressedVideo, _impl_.format_),
    0,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::foxglove::CompressedVideo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::foxglove::_CompressedVideo_default_instance_._instance,
};
const char descriptor_table_protodef_foxglove_2fCompressedVideo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036foxglove/CompressedVideo.proto\022\010foxglo"
    "ve\032\037google/protobuf/timestamp.proto\"p\n\017C"
    "ompressedVideo\022-\n\ttimestamp\030\001 \001(\0132\032.goog"
    "le.protobuf.Timestamp\022\020\n\010frame_id\030\002 \001(\t\022"
    "\014\n\004data\030\003 \001(\014\022\016\n\006format\030\004 \001(\tb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_2fCompressedVideo_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_foxglove_2fCompressedVideo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_foxglove_2fCompressedVideo_2eproto = {
    false,
    false,
    197,
    descriptor_table_protodef_foxglove_2fCompressedVideo_2eproto,
    "foxglove/CompressedVideo.proto",
    &descriptor_table_foxglove_2fCompressedVideo_2eproto_once,
    descriptor_table_foxglove_2fCompressedVideo_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_foxglove_2fCompressedVideo_2eproto::offsets,
    file_level_metadata_foxglove_2fCompressedVideo_2eproto,
    file_level_enum_descriptors_foxglove_2fCompressedVideo_2eproto,
    file_level_service_descriptors_foxglove_2fCompressedVideo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_foxglove_2fCompressedVideo_2eproto_getter() {
  return &descriptor_table_foxglove_2fCompressedVideo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_foxglove_2fCompressedVideo_2eproto(&descriptor_table_foxglove_2fCompressedVideo_2eproto);
namespace foxglove {
// ===================================================================

class CompressedVideo::_Internal {
 public:
  using HasBits = decltype(std::declval<CompressedVideo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const CompressedVideo* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& CompressedVideo::_Internal::timestamp(const CompressedVideo* msg) {
  return *msg->_impl_.timestamp_;
}
void CompressedVideo::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CompressedVideo::CompressedVideo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.CompressedVideo)
}
inline PROTOBUF_NDEBUG_INLINE CompressedVideo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        frame_id_(arena, from.frame_id_),
        data_(arena, from.data_),
        format_(arena, from.format_) {}

CompressedVideo::CompressedVideo(
    ::google::protobuf::Arena* arena,
    const CompressedVideo& from)
    : ::google::protobuf::Message(arena) {
  CompressedVideo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:foxglove.CompressedVideo)
}
inline PROTOBUF_NDEBUG_INLINE CompressedVideo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        frame_id_(arena),
        data_(arena),
        format_(arena) {}

inline void CompressedVideo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timestamp_ = {};
}
CompressedVideo::~CompressedVideo() {
  // @@protoc_insertion_point(destructor:foxglove.CompressedVideo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CompressedVideo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.frame_id_.Destroy();
  _impl_.data_.Destroy();
  _impl_.format_.Destroy();
  delete _impl_.timestamp_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CompressedVideo::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.CompressedVideo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frame_id_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.format_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CompressedVideo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 47, 2> CompressedVideo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CompressedVideo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string format = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.format_)}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.timestamp_)}},
    // string frame_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.frame_id_)}},
    // bytes data = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string frame_id = 2;
    {PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes data = 3;
    {PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string format = 4;
    {PROTOBUF_FIELD_OFFSET(CompressedVideo, _impl_.format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\30\0\10\0\6\0\0\0"
    "foxglove.CompressedVideo"
    "frame_id"
    "format"
  }},
};

::uint8_t* CompressedVideo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.CompressedVideo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string frame_id = 2;
  if (!this->_internal_frame_id().empty()) {
    const std::string& _s = this->_internal_frame_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.CompressedVideo.frame_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // string format = 4;
  if (!this->_internal_format().empty()) {
    const std::string& _s = this->_internal_format();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "foxglove.CompressedVideo.format");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.CompressedVideo)
  return target;
}

::size_t CompressedVideo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.CompressedVideo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_id = 2;
  if (!this->_internal_frame_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_frame_id());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // string format = 4;
  if (!this->_internal_format().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_format());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CompressedVideo::_class_data_ = {
    CompressedVideo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CompressedVideo::GetClassData() const {
  return &_class_data_;
}

void CompressedVideo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CompressedVideo*>(&to_msg);
  auto& from = static_cast<const CompressedVideo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.CompressedVideo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompressedVideo::CopyFrom(const CompressedVideo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.CompressedVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CompressedVideo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CompressedVideo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CompressedVideo::InternalSwap(CompressedVideo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_, &other->_impl_.format_, arena);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::google::protobuf::Metadata CompressedVideo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_foxglove_2fCompressedVideo_2eproto_getter, &descriptor_table_foxglove_2fCompressedVideo_2eproto_once,
      file_level_metadata_foxglove_2fCompressedVideo_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
