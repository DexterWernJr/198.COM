// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/Pose.proto

#include "foxglove/Pose.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace foxglove {

inline constexpr Pose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        orientation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Pose::Pose(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_foxglove_2fPose_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_foxglove_2fPose_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_foxglove_2fPose_2eproto = nullptr;
const ::uint32_t TableStruct_foxglove_2fPose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::foxglove::Pose, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::foxglove::Pose, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::foxglove::Pose, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::foxglove::Pose, _impl_.orientation_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::foxglove::Pose)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::foxglove::_Pose_default_instance_._instance,
};
const char descriptor_table_protodef_foxglove_2fPose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023foxglove/Pose.proto\022\010foxglove\032\031foxglov"
    "e/Quaternion.proto\032\026foxglove/Vector3.pro"
    "to\"V\n\004Pose\022#\n\010position\030\001 \001(\0132\021.foxglove."
    "Vector3\022)\n\013orientation\030\002 \001(\0132\024.foxglove."
    "Quaternionb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_foxglove_2fPose_2eproto_deps[2] =
    {
        &::descriptor_table_foxglove_2fQuaternion_2eproto,
        &::descriptor_table_foxglove_2fVector3_2eproto,
};
static ::absl::once_flag descriptor_table_foxglove_2fPose_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_foxglove_2fPose_2eproto = {
    false,
    false,
    178,
    descriptor_table_protodef_foxglove_2fPose_2eproto,
    "foxglove/Pose.proto",
    &descriptor_table_foxglove_2fPose_2eproto_once,
    descriptor_table_foxglove_2fPose_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_foxglove_2fPose_2eproto::offsets,
    file_level_metadata_foxglove_2fPose_2eproto,
    file_level_enum_descriptors_foxglove_2fPose_2eproto,
    file_level_service_descriptors_foxglove_2fPose_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_foxglove_2fPose_2eproto_getter() {
  return &descriptor_table_foxglove_2fPose_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_foxglove_2fPose_2eproto(&descriptor_table_foxglove_2fPose_2eproto);
namespace foxglove {
// ===================================================================

class Pose::_Internal {
 public:
  using HasBits = decltype(std::declval<Pose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_);
  static const ::foxglove::Vector3& position(const Pose* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::foxglove::Quaternion& orientation(const Pose* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::foxglove::Vector3& Pose::_Internal::position(const Pose* msg) {
  return *msg->_impl_.position_;
}
const ::foxglove::Quaternion& Pose::_Internal::orientation(const Pose* msg) {
  return *msg->_impl_.orientation_;
}
void Pose::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Pose::clear_orientation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Pose::Pose(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:foxglove.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Pose::Pose(
    ::google::protobuf::Arena* arena,
    const Pose& from)
    : ::google::protobuf::Message(arena) {
  Pose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::foxglove::Vector3>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.orientation_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::foxglove::Quaternion>(arena, *from._impl_.orientation_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:foxglove.Pose)
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Pose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, orientation_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::orientation_));
}
Pose::~Pose() {
  // @@protoc_insertion_point(destructor:foxglove.Pose)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Pose::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.orientation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.Pose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Pose::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Pose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Pose, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Pose_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .foxglove.Quaternion orientation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_)}},
    // .foxglove.Vector3 position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .foxglove.Vector3 position = 1;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .foxglove.Quaternion orientation = 2;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::foxglove::Vector3>()},
    {::_pbi::TcParser::GetTable<::foxglove::Quaternion>()},
  }}, {{
  }},
};

::uint8_t* Pose::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.Pose)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .foxglove.Vector3 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .foxglove.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.Pose)
  return target;
}

::size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.Pose)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .foxglove.Vector3 position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .foxglove.Quaternion orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.orientation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Pose::_class_data_ = {
    Pose::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Pose::GetClassData() const {
  return &_class_data_;
}

void Pose::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Pose*>(&to_msg);
  auto& from = static_cast<const Pose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.Pose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::foxglove::Vector3::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_orientation()->::foxglove::Quaternion::MergeFrom(
          from._internal_orientation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Pose::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Pose::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Pose::InternalSwap(Pose* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.orientation_)
      + sizeof(Pose::_impl_.orientation_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_foxglove_2fPose_2eproto_getter, &descriptor_table_foxglove_2fPose_2eproto_once,
      file_level_metadata_foxglove_2fPose_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
