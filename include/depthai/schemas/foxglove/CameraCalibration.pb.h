// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/CameraCalibration.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fCameraCalibration_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fCameraCalibration_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fCameraCalibration_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fCameraCalibration_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_foxglove_2fCameraCalibration_2eproto;
namespace foxglove {
class CameraCalibration;
struct CameraCalibrationDefaultTypeInternal;
extern CameraCalibrationDefaultTypeInternal _CameraCalibration_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace foxglove {

// ===================================================================


// -------------------------------------------------------------------

class CameraCalibration final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.CameraCalibration) */ {
 public:
  inline CameraCalibration() : CameraCalibration(nullptr) {}
  ~CameraCalibration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraCalibration(::google::protobuf::internal::ConstantInitialized);

  inline CameraCalibration(const CameraCalibration& from)
      : CameraCalibration(nullptr, from) {}
  CameraCalibration(CameraCalibration&& from) noexcept
    : CameraCalibration() {
    *this = ::std::move(from);
  }

  inline CameraCalibration& operator=(const CameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraCalibration& operator=(CameraCalibration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraCalibration& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraCalibration* internal_default_instance() {
    return reinterpret_cast<const CameraCalibration*>(
               &_CameraCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraCalibration& a, CameraCalibration& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraCalibration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraCalibration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraCalibration* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraCalibration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CameraCalibration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CameraCalibration& from) {
    CameraCalibration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CameraCalibration* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "foxglove.CameraCalibration";
  }
  protected:
  explicit CameraCalibration(::google::protobuf::Arena* arena);
  CameraCalibration(::google::protobuf::Arena* arena, const CameraCalibration& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 5,
    kKFieldNumber = 6,
    kRFieldNumber = 7,
    kPFieldNumber = 8,
    kDistortionModelFieldNumber = 4,
    kFrameIdFieldNumber = 9,
    kTimestampFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated double D = 5;
  int d_size() const;
  private:
  int _internal_d_size() const;

  public:
  void clear_d() ;
  double d(int index) const;
  void set_d(int index, double value);
  void add_d(double value);
  const ::google::protobuf::RepeatedField<double>& d() const;
  ::google::protobuf::RepeatedField<double>* mutable_d();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_d() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_d();

  public:
  // repeated double K = 6;
  int k_size() const;
  private:
  int _internal_k_size() const;

  public:
  void clear_k() ;
  double k(int index) const;
  void set_k(int index, double value);
  void add_k(double value);
  const ::google::protobuf::RepeatedField<double>& k() const;
  ::google::protobuf::RepeatedField<double>* mutable_k();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_k() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_k();

  public:
  // repeated double R = 7;
  int r_size() const;
  private:
  int _internal_r_size() const;

  public:
  void clear_r() ;
  double r(int index) const;
  void set_r(int index, double value);
  void add_r(double value);
  const ::google::protobuf::RepeatedField<double>& r() const;
  ::google::protobuf::RepeatedField<double>* mutable_r();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_r() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_r();

  public:
  // repeated double P = 8;
  int p_size() const;
  private:
  int _internal_p_size() const;

  public:
  void clear_p() ;
  double p(int index) const;
  void set_p(int index, double value);
  void add_p(double value);
  const ::google::protobuf::RepeatedField<double>& p() const;
  ::google::protobuf::RepeatedField<double>* mutable_p();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_p() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_p();

  public:
  // string distortion_model = 4;
  void clear_distortion_model() ;
  const std::string& distortion_model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_distortion_model(Arg_&& arg, Args_... args);
  std::string* mutable_distortion_model();
  PROTOBUF_NODISCARD std::string* release_distortion_model();
  void set_allocated_distortion_model(std::string* value);

  private:
  const std::string& _internal_distortion_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distortion_model(
      const std::string& value);
  std::string* _internal_mutable_distortion_model();

  public:
  // string frame_id = 9;
  void clear_frame_id() ;
  const std::string& frame_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_frame_id(Arg_&& arg, Args_... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* value);

  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(
      const std::string& value);
  std::string* _internal_mutable_frame_id();

  public:
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // fixed32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // fixed32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:foxglove.CameraCalibration)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      67, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> d_;
    ::google::protobuf::RepeatedField<double> k_;
    ::google::protobuf::RepeatedField<double> r_;
    ::google::protobuf::RepeatedField<double> p_;
    ::google::protobuf::internal::ArenaStringPtr distortion_model_;
    ::google::protobuf::internal::ArenaStringPtr frame_id_;
    ::google::protobuf::Timestamp* timestamp_;
    ::uint32_t width_;
    ::uint32_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fCameraCalibration_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CameraCalibration

// .google.protobuf.Timestamp timestamp = 1;
inline bool CameraCalibration::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CameraCalibration::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CameraCalibration::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.timestamp)
  return _internal_timestamp();
}
inline void CameraCalibration::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.CameraCalibration.timestamp)
}
inline ::google::protobuf::Timestamp* CameraCalibration::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* CameraCalibration::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:foxglove.CameraCalibration.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CameraCalibration::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* CameraCalibration::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:foxglove.CameraCalibration.timestamp)
  return _msg;
}
inline void CameraCalibration::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:foxglove.CameraCalibration.timestamp)
}

// string frame_id = 9;
inline void CameraCalibration::clear_frame_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_id_.ClearToEmpty();
}
inline const std::string& CameraCalibration::frame_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.frame_id)
  return _internal_frame_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraCalibration::set_frame_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.frame_id)
}
inline std::string* CameraCalibration::mutable_frame_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:foxglove.CameraCalibration.frame_id)
  return _s;
}
inline const std::string& CameraCalibration::_internal_frame_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.frame_id_.Get();
}
inline void CameraCalibration::_internal_set_frame_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_id_.Set(value, GetArena());
}
inline std::string* CameraCalibration::_internal_mutable_frame_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.frame_id_.Mutable( GetArena());
}
inline std::string* CameraCalibration::release_frame_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:foxglove.CameraCalibration.frame_id)
  return _impl_.frame_id_.Release();
}
inline void CameraCalibration::set_allocated_frame_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.frame_id_.IsDefault()) {
          _impl_.frame_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.CameraCalibration.frame_id)
}

// fixed32 width = 2;
inline void CameraCalibration::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0u;
}
inline ::uint32_t CameraCalibration::width() const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.width)
  return _internal_width();
}
inline void CameraCalibration::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.width)
}
inline ::uint32_t CameraCalibration::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void CameraCalibration::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// fixed32 height = 3;
inline void CameraCalibration::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0u;
}
inline ::uint32_t CameraCalibration::height() const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.height)
  return _internal_height();
}
inline void CameraCalibration::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.height)
}
inline ::uint32_t CameraCalibration::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void CameraCalibration::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// string distortion_model = 4;
inline void CameraCalibration::clear_distortion_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.distortion_model_.ClearToEmpty();
}
inline const std::string& CameraCalibration::distortion_model() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.distortion_model)
  return _internal_distortion_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraCalibration::set_distortion_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.distortion_model_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.distortion_model)
}
inline std::string* CameraCalibration::mutable_distortion_model() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_distortion_model();
  // @@protoc_insertion_point(field_mutable:foxglove.CameraCalibration.distortion_model)
  return _s;
}
inline const std::string& CameraCalibration::_internal_distortion_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.distortion_model_.Get();
}
inline void CameraCalibration::_internal_set_distortion_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.distortion_model_.Set(value, GetArena());
}
inline std::string* CameraCalibration::_internal_mutable_distortion_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.distortion_model_.Mutable( GetArena());
}
inline std::string* CameraCalibration::release_distortion_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:foxglove.CameraCalibration.distortion_model)
  return _impl_.distortion_model_.Release();
}
inline void CameraCalibration::set_allocated_distortion_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.distortion_model_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.distortion_model_.IsDefault()) {
          _impl_.distortion_model_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.CameraCalibration.distortion_model)
}

// repeated double D = 5;
inline int CameraCalibration::_internal_d_size() const {
  return _internal_d().size();
}
inline int CameraCalibration::d_size() const {
  return _internal_d_size();
}
inline void CameraCalibration::clear_d() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.d_.Clear();
}
inline double CameraCalibration::d(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.D)
  return _internal_d().Get(index);
}
inline void CameraCalibration::set_d(int index, double value) {
  _internal_mutable_d()->Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.D)
}
inline void CameraCalibration::add_d(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_d()->Add(value);
  // @@protoc_insertion_point(field_add:foxglove.CameraCalibration.D)
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::d() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:foxglove.CameraCalibration.D)
  return _internal_d();
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::mutable_d()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:foxglove.CameraCalibration.D)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_d();
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::_internal_d()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.d_;
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::_internal_mutable_d() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.d_;
}

// repeated double K = 6;
inline int CameraCalibration::_internal_k_size() const {
  return _internal_k().size();
}
inline int CameraCalibration::k_size() const {
  return _internal_k_size();
}
inline void CameraCalibration::clear_k() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.k_.Clear();
}
inline double CameraCalibration::k(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.K)
  return _internal_k().Get(index);
}
inline void CameraCalibration::set_k(int index, double value) {
  _internal_mutable_k()->Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.K)
}
inline void CameraCalibration::add_k(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_k()->Add(value);
  // @@protoc_insertion_point(field_add:foxglove.CameraCalibration.K)
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::k() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:foxglove.CameraCalibration.K)
  return _internal_k();
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::mutable_k()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:foxglove.CameraCalibration.K)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_k();
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::_internal_k()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.k_;
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::_internal_mutable_k() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.k_;
}

// repeated double R = 7;
inline int CameraCalibration::_internal_r_size() const {
  return _internal_r().size();
}
inline int CameraCalibration::r_size() const {
  return _internal_r_size();
}
inline void CameraCalibration::clear_r() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.r_.Clear();
}
inline double CameraCalibration::r(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.R)
  return _internal_r().Get(index);
}
inline void CameraCalibration::set_r(int index, double value) {
  _internal_mutable_r()->Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.R)
}
inline void CameraCalibration::add_r(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_r()->Add(value);
  // @@protoc_insertion_point(field_add:foxglove.CameraCalibration.R)
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::r() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:foxglove.CameraCalibration.R)
  return _internal_r();
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::mutable_r()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:foxglove.CameraCalibration.R)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_r();
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::_internal_r()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.r_;
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::_internal_mutable_r() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.r_;
}

// repeated double P = 8;
inline int CameraCalibration::_internal_p_size() const {
  return _internal_p().size();
}
inline int CameraCalibration::p_size() const {
  return _internal_p_size();
}
inline void CameraCalibration::clear_p() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.p_.Clear();
}
inline double CameraCalibration::p(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.P)
  return _internal_p().Get(index);
}
inline void CameraCalibration::set_p(int index, double value) {
  _internal_mutable_p()->Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.P)
}
inline void CameraCalibration::add_p(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_p()->Add(value);
  // @@protoc_insertion_point(field_add:foxglove.CameraCalibration.P)
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::p() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:foxglove.CameraCalibration.P)
  return _internal_p();
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::mutable_p()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:foxglove.CameraCalibration.P)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_p();
}
inline const ::google::protobuf::RepeatedField<double>& CameraCalibration::_internal_p()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.p_;
}
inline ::google::protobuf::RepeatedField<double>* CameraCalibration::_internal_mutable_p() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.p_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_foxglove_2fCameraCalibration_2eproto_2epb_2eh
