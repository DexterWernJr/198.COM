// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/SceneEntityDeletion.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_foxglove_2fSceneEntityDeletion_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_foxglove_2fSceneEntityDeletion_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_foxglove_2fSceneEntityDeletion_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_foxglove_2fSceneEntityDeletion_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_foxglove_2fSceneEntityDeletion_2eproto;
namespace foxglove {
class SceneEntityDeletion;
struct SceneEntityDeletionDefaultTypeInternal;
extern SceneEntityDeletionDefaultTypeInternal _SceneEntityDeletion_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace foxglove {
enum SceneEntityDeletion_Type : int {
  SceneEntityDeletion_Type_MATCHING_ID = 0,
  SceneEntityDeletion_Type_ALL = 1,
  SceneEntityDeletion_Type_SceneEntityDeletion_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SceneEntityDeletion_Type_SceneEntityDeletion_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SceneEntityDeletion_Type_IsValid(int value);
extern const uint32_t SceneEntityDeletion_Type_internal_data_[];
constexpr SceneEntityDeletion_Type SceneEntityDeletion_Type_Type_MIN = static_cast<SceneEntityDeletion_Type>(0);
constexpr SceneEntityDeletion_Type SceneEntityDeletion_Type_Type_MAX = static_cast<SceneEntityDeletion_Type>(1);
constexpr int SceneEntityDeletion_Type_Type_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
SceneEntityDeletion_Type_descriptor();
template <typename T>
const std::string& SceneEntityDeletion_Type_Name(T value) {
  static_assert(std::is_same<T, SceneEntityDeletion_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return SceneEntityDeletion_Type_Name(static_cast<SceneEntityDeletion_Type>(value));
}
template <>
inline const std::string& SceneEntityDeletion_Type_Name(SceneEntityDeletion_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SceneEntityDeletion_Type_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool SceneEntityDeletion_Type_Parse(absl::string_view name, SceneEntityDeletion_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SceneEntityDeletion_Type>(
      SceneEntityDeletion_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SceneEntityDeletion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.SceneEntityDeletion) */ {
 public:
  inline SceneEntityDeletion() : SceneEntityDeletion(nullptr) {}
  ~SceneEntityDeletion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SceneEntityDeletion(::google::protobuf::internal::ConstantInitialized);

  inline SceneEntityDeletion(const SceneEntityDeletion& from)
      : SceneEntityDeletion(nullptr, from) {}
  SceneEntityDeletion(SceneEntityDeletion&& from) noexcept
    : SceneEntityDeletion() {
    *this = ::std::move(from);
  }

  inline SceneEntityDeletion& operator=(const SceneEntityDeletion& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEntityDeletion& operator=(SceneEntityDeletion&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEntityDeletion& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEntityDeletion* internal_default_instance() {
    return reinterpret_cast<const SceneEntityDeletion*>(
               &_SceneEntityDeletion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SceneEntityDeletion& a, SceneEntityDeletion& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEntityDeletion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEntityDeletion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEntityDeletion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEntityDeletion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SceneEntityDeletion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SceneEntityDeletion& from) {
    SceneEntityDeletion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SceneEntityDeletion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "foxglove.SceneEntityDeletion";
  }
  protected:
  explicit SceneEntityDeletion(::google::protobuf::Arena* arena);
  SceneEntityDeletion(::google::protobuf::Arena* arena, const SceneEntityDeletion& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = SceneEntityDeletion_Type;
  static constexpr Type MATCHING_ID = SceneEntityDeletion_Type_MATCHING_ID;
  static constexpr Type ALL = SceneEntityDeletion_Type_ALL;
  static inline bool Type_IsValid(int value) {
    return SceneEntityDeletion_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = SceneEntityDeletion_Type_Type_MIN;
  static constexpr Type Type_MAX = SceneEntityDeletion_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = SceneEntityDeletion_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return SceneEntityDeletion_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return SceneEntityDeletion_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return SceneEntityDeletion_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string id = 3;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .foxglove.SceneEntityDeletion.Type type = 2;
  void clear_type() ;
  ::foxglove::SceneEntityDeletion_Type type() const;
  void set_type(::foxglove::SceneEntityDeletion_Type value);

  private:
  ::foxglove::SceneEntityDeletion_Type _internal_type() const;
  void _internal_set_type(::foxglove::SceneEntityDeletion_Type value);

  public:
  // @@protoc_insertion_point(class_scope:foxglove.SceneEntityDeletion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      39, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::Timestamp* timestamp_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_foxglove_2fSceneEntityDeletion_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SceneEntityDeletion

// .google.protobuf.Timestamp timestamp = 1;
inline bool SceneEntityDeletion::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& SceneEntityDeletion::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& SceneEntityDeletion::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntityDeletion.timestamp)
  return _internal_timestamp();
}
inline void SceneEntityDeletion::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:foxglove.SceneEntityDeletion.timestamp)
}
inline ::google::protobuf::Timestamp* SceneEntityDeletion::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* SceneEntityDeletion::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:foxglove.SceneEntityDeletion.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* SceneEntityDeletion::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* SceneEntityDeletion::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntityDeletion.timestamp)
  return _msg;
}
inline void SceneEntityDeletion::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:foxglove.SceneEntityDeletion.timestamp)
}

// .foxglove.SceneEntityDeletion.Type type = 2;
inline void SceneEntityDeletion::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::foxglove::SceneEntityDeletion_Type SceneEntityDeletion::type() const {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntityDeletion.type)
  return _internal_type();
}
inline void SceneEntityDeletion::set_type(::foxglove::SceneEntityDeletion_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:foxglove.SceneEntityDeletion.type)
}
inline ::foxglove::SceneEntityDeletion_Type SceneEntityDeletion::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::foxglove::SceneEntityDeletion_Type>(_impl_.type_);
}
inline void SceneEntityDeletion::_internal_set_type(::foxglove::SceneEntityDeletion_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string id = 3;
inline void SceneEntityDeletion::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SceneEntityDeletion::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:foxglove.SceneEntityDeletion.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SceneEntityDeletion::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:foxglove.SceneEntityDeletion.id)
}
inline std::string* SceneEntityDeletion::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:foxglove.SceneEntityDeletion.id)
  return _s;
}
inline const std::string& SceneEntityDeletion::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void SceneEntityDeletion::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* SceneEntityDeletion::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* SceneEntityDeletion::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:foxglove.SceneEntityDeletion.id)
  return _impl_.id_.Release();
}
inline void SceneEntityDeletion::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:foxglove.SceneEntityDeletion.id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::foxglove::SceneEntityDeletion_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::foxglove::SceneEntityDeletion_Type>() {
  return ::foxglove::SceneEntityDeletion_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_foxglove_2fSceneEntityDeletion_2eproto_2epb_2eh
